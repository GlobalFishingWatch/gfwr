[{"path":"https://globalfishingwatch.github.io/gfwr/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"gfwr open source project welcome contributions multiple kinds: bug reports, fixes bugs, typos, improvements documentation, new functions.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/CONTRIBUTING.html","id":"contributor-agreement","dir":"","previous_headings":"","what":"Contributor Agreement","title":"Contributing","text":"contributing, agree may redistribute work license. exchange, address issues /assess change proposal promptly can, welcome member community. Everyone involved gfwr agrees abide code conduct.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/CONTRIBUTING.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to Contribute","title":"Contributing","text":"easiest way get started file issue tell us spelling mistake, awkward wording, bug. allows us assign item someone respond threaded discussion. comfortable Git like add change material, can submit pull request (PR). Please address PRs develop branch. Please commit documentation files, either .Rd files generated pkgdown. documentation generated us develop branch. modify function, please check package passing checks using devtools::check() GitHub account, can send us comments email research@globalfishingwatch.org.","code":""},{"path":[]},{"path":"https://globalfishingwatch.github.io/gfwr/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"What to Contribute","what":"Fixing typos","title":"Contributing","text":"can fix typos, spelling mistakes, grammatical errors documentation directly PR branch develop. generally means ’ll need edit roxygen2 comments .R file, .Rd file. Please commit .Rd file, documentation generated us develop branch. can also use options 1 3 previous section","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/CONTRIBUTING.html","id":"improvements-to-documentation","dir":"","previous_headings":"What to Contribute","what":"Improvements to documentation","title":"Contributing","text":"may think functions clear enough suggestions improve documentation package. ’ll also need file issue. can also edit roxygen2 comments corresponding .R file file PR. Please commit .Rd files, document changes .","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/CONTRIBUTING.html","id":"bug-reports","dir":"","previous_headings":"What to Contribute","what":"Bug reports","title":"Contributing","text":"’ve found bug, first create minimal reproducible example (reprex). Spend time trying make minimal possible: time spend , easier gfwr team fix . Use sample shapefile send code create sf object possible. example requires use shapefile file please send along can reproduce error.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/CONTRIBUTING.html","id":"fixes-to-bugs","dir":"","previous_headings":"What to Contribute","what":"Fixes to bugs","title":"Contributing","text":"see bug report issue know fix , please share solution issue. can PR fix issue, please let us know issue.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/CONTRIBUTING.html","id":"new-functions","dir":"","previous_headings":"What to Contribute","what":"New functions","title":"Contributing","text":"gfwr package developed help R community access Global Fishing Watch data research applications. ideas new functions consistent aim, please let us know email, issue, proposal PR. like write function prefer chat first us, can open issue start conversation PR.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/CONTRIBUTING.html","id":"what-not-to-contribute","dir":"","previous_headings":"","what":"What Not to Contribute","title":"Contributing","text":"Remember package wrapper API, intend add functions plot analyze data. scope package. interested collaborating us generate package, please get touch. Otherwise, welcome create package functions scope one . happy see people making contributions community based work. (contributing guide adaptation Carpentries, tidyverse, unifr contributing guides.)","code":""},{"path":[]},{"path":"https://globalfishingwatch.github.io/gfwr/CodeOfConduct.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our pledge","title":"Code of conduct","text":"members, contributors, leaders pledge make participation gfwr contributing users community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/CodeOfConduct.html","id":"our-standards","dir":"","previous_headings":"","what":"Our standards","title":"Code of conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people. respectful differing opinions, viewpoints, experiences. Giving gracefully accepting constructive feedback. Accepting responsibility apologizing affected mistakes, learning experience. Focusing best just us individuals, overall community. Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind. Trolling, insulting derogatory comments, personal political attacks. Public private harassment. Publishing others’ private information, physical email address, without explicit permission. conduct reasonably considered inappropriate professional setting.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/CodeOfConduct.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement responsibilities","title":"Code of conduct","text":"gfwr maintainers responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/CodeOfConduct.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Code of conduct","text":"Code Conduct applies within gfwr community spaces, also applies individual officially representing community public spaces. Examples representing gfwr community include using official gfwr communication channel, GitHub community discussions, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/CodeOfConduct.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Code of conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported gfwr package maintainers either publicly opening issue gfwr repository privately e-mail maintainer (emails DESCRIPTION file package), e.g., needed reporting unacceptable behavior another maintainer). complaints reviewed investigated promptly fairly. maintainers obligated respect privacy security reporter incident.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/CodeOfConduct.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement guidelines","title":"Code of conduct","text":"maintainers follow Community Impact Guidelines determining consequences action deem violation Code Conduct: 1. Correction Community impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning maintainers, providing clarity around nature violation explanation behavior inappropriate. public apology may requested. 2. Warning Community impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban. 3. Temporary ban Community impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban. 4. Permanent ban Community impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within gfwr community.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/CodeOfConduct.html","id":"attribution","dir":"","previous_headings":"Enforcement guidelines","what":"Attribution","title":"Code of conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://globalfishingwatch.github.io/gfwr/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://globalfishingwatch.github.io/gfwr/articles/identity.html","id":"automatic-identification-system-ais","dir":"Articles","previous_headings":"","what":"Automatic Identification System (AIS)","title":"Using get_vessel_info(): the basics of vessel identity in Global Fishing Watch and gfwr","text":"Automatic Identification System (AIS) automatic tracking system originally developed help preventing collisions vessels sea. Vessels broadcast AIS alert vessels presence, terrestrial satellite receivers can also receive messages monitor vessel movements. AIS core Global Fishing Watch analysis pipelines, including AIS-based fishing effort calculation displayed map available function get_raster() gfwr. AIS messages include identity information vessel, ship name, call sign, International Maritime Organization (IMO) number, well identifier known Maritime Mobile Service Identity (MMSI). MMSI nine-digit numbers broadcasted AIS messages. MMSIs supposed unique vessel, 1. vessel can change MMSIs throughout lifecycle–example ’s reflagged, first three digits refer flag country 2. several vessels can broadcast MMSI time. happens many reasons, including fact data entry AIS messages manual. Shipname callsign can also transmitted AIS messages optional, every AIS-broadcasting vessel transmits , transmission can inconsistent. Shipnames can also vary lot spelling, requiring fuzzy matching detect refer vessel. IMO numbers permanent unique identifiers follow vessel construction scrapping. Assigned International Maritime Organization, IMO numbers required subset industrial fishing vessels. IMO number can transmitted along MMSI AIS messages frequently missing. identity markers often starting point inquiry around vessel identity. However, due characteristics, none identifiers interpreted sole identity source vessel. Global Fishing Watch extensive work analyze gather information available given vessel cohesive sets. Note: MMSI referred ssvid tables. ssvid stands “source-specific vessel identity”. case, source AIS, ssvid = MMSI.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/articles/identity.html","id":"vesselid","dir":"Articles","previous_headings":"","what":"vesselId","title":"Using get_vessel_info(): the basics of vessel identity in Global Fishing Watch and gfwr","text":"solve complexity several vessel identifiers can duplicated missing vessel can change time, Global Fishing Watch developed vesselId, vessel identity variable combines vessel information specific specific time interval. vesselId formed combination MMSI IMO number available, MMSI, callsign shipname transmitted AIS messages. vesselId associated single MMSI specific period time, refers single vessel. side, single vessel can several vesselId time, simple calls get_vessel_info() can return tables many vesselIds different identity markers time.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/articles/identity.html","id":"basic-and-advanced-searches","dir":"Articles","previous_headings":"","what":"Basic and advanced searches","title":"Using get_vessel_info(): the basics of vessel identity in Global Fishing Watch and gfwr","text":"function get_vessel_info() allows user run basic query using MMSI, callsign, shipname IMO number also allows complex searches, using combination retrieve vessel interest accurately: simple search using “query” search_type = “search” (default can omitted function call) complex search fuzzy matching using \"\" search_type = \"search\" Importantly, response return information vessel matches combination identity markers requested, ones requested. means function “filter” results requested function call. Instead, function returns vesselIds belonging vessel. Note: logic apply get_event(): calls get_event() using single vesselId return events requested vesselId.","code":"get_vessel_info(query = 224224000, search_type = \"search\") get_vessel_info(where = \"imo = '8300949'\") get_vessel_info(where = \"imo = '8300949' AND ssvid = '214182732'\") get_vessel_info(where = \"shipname LIKE '%GABU REEFE%' OR imo = '8300949'\")"},{"path":"https://globalfishingwatch.github.io/gfwr/articles/identity.html","id":"use-examples","dir":"Articles","previous_headings":"","what":"Use examples","title":"Using get_vessel_info(): the basics of vessel identity in Global Fishing Watch and gfwr","text":"Let’s go back simple search. get information vessel using MMSI, IMO number, callsign name, search can done directly using number string. example, look vessel MMSI = 224224000, number enough: response API list seven elements: content original AIS messages transmitted vessel appears $selfReportedInfo: can see, vessel returns dataframe two rows. One corresponds original search, ssvid (MMSI) equals 224224000. second line different ssvid, name IMO number. two lines correspond vessel, can see fields transmissionDateFrom transmissionDateTo, flag, ssvid, vessel operated Spain flag (ESP) one ssvid 2015 2019, reflagged operated BES flag (Bonaire, Sint Eustatius Saba) 2019 2023. change ssvid reflects reflagging operation first three digits MMSI correspond flag country. Variable matchFields reports matching done using \"SEVERAL_FIELDS\". simple case, successive vesselId overlap time identifiers match, spite changes. vessels, variables transmissionDateFrom transmissionDateTo can overlap fields can different.","code":"mmsi_search <- get_vessel_info(224224000) # 1 total vessels names(mmsi_search) # [1] \"dataset\"                      \"registryInfoTotalRecords\"     # [3] \"registryInfo\"                 \"registryOwners\"               # [5] \"registryPublicAuthorizations\" \"combinedSourcesInfo\"          # [7] \"selfReportedInfo\" mmsi_search$selfReportedInfo # # A tibble: 2 × 14 #   index vesselId   ssvid shipname nShipname flag  callsign imo   messagesCounter #   <dbl> <chr>      <chr> <chr>    <chr>     <chr> <chr>    <chr>           <int> # 1     1 6632c9eb8… 3061… AGURTZA… AGURTZAB… BES   PJBL     8733…          418581 # 2     1 3c99c326d… 2242… AGURTZA… AGURTZAB… ESP   EBSJ     8733…          135057 # # ℹ 5 more variables: positionsCounter <int>, sourceCode <list>, # #   matchFields <chr>, transmissionDateFrom <chr>, transmissionDateTo <chr> mmsi_search$selfReportedInfo %>%    select(vesselId, ssvid, flag, contains(\"Date\")) # # A tibble: 2 × 5 #   vesselId                   ssvid flag  transmissionDateFrom transmissionDateTo #   <chr>                      <chr> <chr> <chr>                <chr>              # 1 6632c9eb8-8009-abdb-baf9-… 3061… BES   2019-10-15T12:16:54Z 2023-11-30T18:22:… # 2 3c99c326d-dd2e-175d-626f-… 2242… ESP   2015-10-13T15:47:16Z 2019-10-15T12:10:…"},{"path":"https://globalfishingwatch.github.io/gfwr/articles/identity.html","id":"using-vesselid-in-other-functions","dir":"Articles","previous_headings":"Use examples","what":"Using vesselId in other functions","title":"Using get_vessel_info(): the basics of vessel identity in Global Fishing Watch and gfwr","text":"vesselId can extracted $selfReportedInfo$vesselId, highly recommended take look response confirm values returned vesselId selected. picking vesselId use functions, useful examine: vesselId corresponds time interval interest identifiers matching, indicating enough confidence different vesselId refer vessels interest number messages transmitted, messagesCounter. Sometimes positions transmitted short time interval vesselId can treated exception can use selected vesselId get events related vessel interest functions. Let’s find encounter events vesselIds previous search: example, Global Fishing Watch analyses report vessel 2 encounters.","code":"id <- mmsi_search$selfReportedInfo$vesselId id # [1] \"6632c9eb8-8009-abdb-baf9-b67d65f20510\" # [2] \"3c99c326d-dd2e-175d-626f-a3c488a4342b\" events <- get_event(event_type = \"ENCOUNTER\", vessels = id)  # [1] \"Downloading 2 events from GFW\" events # # A tibble: 2 × 17 #   start               end                 eventId          eventType   lat   lon #   <dttm>              <dttm>              <chr>            <chr>     <dbl> <dbl> # 1 2020-09-14 08:30:00 2020-09-14 11:50:00 da911addfabd3ce… encounter  8.01 -20.8 # 2 2021-04-19 09:40:00 2021-04-19 12:50:00 5cdd7f497291e06… encounter  3.08 -12.2 # # ℹ 11 more variables: regions <list>, boundingBox <list>, distances <list>, # #   vesselId <chr>, vessel_name <chr>, vessel_ssvid <chr>, vessel_flag <chr>, # #   vessel_type <chr>, vessel_publicAuthorizations <list>, # #   vessel_nextPort <list>, event_info <list>"},{"path":"https://globalfishingwatch.github.io/gfwr/articles/identity.html","id":"registry-data","dir":"Articles","previous_headings":"","what":"Registry data","title":"Using get_vessel_info(): the basics of vessel identity in Global Fishing Watch and gfwr","text":"Vessel registries carry important vessel identity information, like vessel characteristics, registration history, licenses fish certain areas, vessel ownership data. Global Fishing Watch compiles vessel information 40 public vessel registries matches information AIS-transmitted identity fields provide better overview vessel’s identity. information requested parameter \"includes\" returned element $registryInfoTotalRecords (number records registries), $registryInfo actual information registry, including identity, vessel characteristics dates transmission $registryOwners name, country origin, ssvid vessel dates ownership. Sometimes vessel can change identities flags owners remain , sometimes changes identity correspond changes ownership. $registryPublicAuthorizations response respective organizations","code":"mmsi_search$registryInfoTotalRecords # # A tibble: 1 × 1 #   registryInfoTotalRecords #                      <int> # 1                        1 mmsi_search$registryInfo # # A tibble: 1 × 16 #   index recordId        sourceCode ssvid flag  shipname nShipname callsign imo   #   <dbl> <chr>           <list>     <chr> <chr> <chr>    <chr>     <chr>    <chr> # 1     1 e0c9823749264a… <chr [7]>  2242… ESP   AGURTZA… AGURTZAB… EBSJ     8733… # # ℹ 7 more variables: transmissionDateFrom <chr>, transmissionDateTo <chr>, # #   geartypes <chr>, lengthM <int>, tonnageGt <dbl>, vesselInfoReference <chr>, # #   extraFields <list> mmsi_search$registryOwners # # A tibble: 0 × 2 # # ℹ 2 variables: index <dbl>, <list> <list> mmsi_search$registryPublicAuthorizations %>%   tidyr::unnest(sourceCode) # # A tibble: 3 × 5 #   index dateFrom             dateTo               ssvid     sourceCode #   <dbl> <chr>                <chr>                <chr>     <chr>      # 1     1 2019-01-01T00:00:00Z 2019-10-01T00:00:00Z 224224000 ICCAT      # 2     1 2012-01-01T00:00:00Z 2019-01-01T00:00:00Z 224224000 IOTC       # 3     1 2019-10-15T00:00:00Z 2023-02-01T00:00:00Z 306118000 ICCAT"},{"path":"https://globalfishingwatch.github.io/gfwr/articles/identity.html","id":"matching-ais-and-registries-case-examples","dir":"Articles","previous_headings":"","what":"Matching AIS and registries: case examples","title":"Using get_vessel_info(): the basics of vessel identity in Global Fishing Watch and gfwr","text":"best cases, AIS messages match registry information whole identity vessel can reconstructed. two examples registry AIS data overlapping time. vessel single vesselId throughout entire history: vessel one vesselId based AIS, history easy reconstruct: However, sometimes vessel found AIS registry information registry fields come back empty. also possible search returns vessel matching AIS information registry.","code":"one_vesselId <- get_vessel_info(where = \"ssvid='701024000'\") # 1 total vessels  #see AIS-based identities one_vesselId$selfReportedInfo # # A tibble: 1 × 14 #   index vesselId   ssvid shipname nShipname flag  callsign imo   messagesCounter #   <dbl> <chr>      <chr> <chr>    <chr>     <chr> <chr>    <chr>           <int> # 1     1 8e930bac5… 7010… ATLANTI… ATLANTIC… ARG   LW3233   8615…         8117825 # # ℹ 5 more variables: positionsCounter <int>, sourceCode <list>, # #   matchFields <chr>, transmissionDateFrom <chr>, transmissionDateTo <chr> #check registry info: one_vesselId$registryInfo %>%   dplyr::relocate(transmissionDateFrom, transmissionDateTo) #changing column order for visualization # # A tibble: 1 × 17 #   transmissionDateFrom transmissionDateTo  index recordId sourceCode ssvid flag  #   <chr>                <chr>               <dbl> <chr>    <list>     <chr> <chr> # 1 2012-01-04T05:00:00Z 2025-05-31T21:10:5…     1 4550252… <chr [2]>  7010… ARG   # # ℹ 10 more variables: shipname <chr>, nShipname <chr>, callsign <chr>, # #   imo <chr>, latestVesselInfo <lgl>, geartypes <chr>, lengthM <dbl>, # #   tonnageGt <int>, vesselInfoReference <chr>, extraFields <list> multiple_vesselIds <- get_vessel_info(where = \"ssvid='412217989'\")  # 1 total vessels # see AIS-based identities: multiple_vesselIds$selfReportedInfo %>%   relocate(transmissionDateFrom, transmissionDateTo)  # # A tibble: 3 × 14 #   transmissionDateFrom transmissionDateTo   index vesselId        ssvid shipname #   <chr>                <chr>                <dbl> <chr>           <chr> <chr>    # 1 2021-11-29T06:20:07Z 2025-01-03T03:26:57Z     1 b373b6306-6d0e… 4122… HAO YAN… # 2 2014-03-29T00:32:05Z 2021-11-27T20:13:55Z     1 305097c65-5323… 4122… JIN LIA… # 3 2012-08-01T01:47:23Z 2014-03-29T00:14:05Z     1 95a173191-11f9… 4316… HAKKO M… # # ℹ 8 more variables: nShipname <chr>, flag <chr>, callsign <chr>, imo <chr>, # #   messagesCounter <int>, positionsCounter <int>, sourceCode <list>, # #   matchFields <chr> #check registry info: multiple_vesselIds$registryInfo  # # A tibble: 1 × 17 #   index recordId        sourceCode ssvid flag  shipname nShipname callsign imo   #   <dbl> <chr>           <list>     <chr> <chr> <chr>    <chr>     <chr>    <chr> # 1     1 bdd48f4144f4fd… <chr [6]>  4122… JPN   HAOYANG… HAOYANG77 BAWB     9038… # # ℹ 8 more variables: latestVesselInfo <lgl>, transmissionDateFrom <chr>, # #   transmissionDateTo <chr>, geartypes <chr>, lengthM <dbl>, tonnageGt <dbl>, # #   vesselInfoReference <chr>, extraFields <list>"},{"path":"https://globalfishingwatch.github.io/gfwr/articles/identity.html","id":"read-more","dir":"Articles","previous_headings":"","what":"Read more:","title":"Using get_vessel_info(): the basics of vessel identity in Global Fishing Watch and gfwr","text":"Park et al. (2023). Tracking elusive shifting identities global fishing fleet link detailed account Global Fishing Watch identity work. https://globalfishingwatch.org/datasets--code-vessel-identity/ https://globalfishingwatch.org/data/spoofing-one-identity-shared--multiple-vessels/","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/articles/making-maps.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Making maps with `gfwr`","text":"powerful feature gfwr ability get data making custom maps human activity sea, apparent fishing effort, -sea transshipment, port visits. get_raster() function provides gridded (e.g. raster) data GFW’s 4Wings Map Visualization API useful making heatmaps, get_event() function supplies vector data (mostly point locations) GFW Events API individual vessel events. vignette demonstrates use combine multiple gfwr functions make variety maps fishing vessel activity. Specifically, vignette show use get_raster() function make heatmaps apparent fishing effort, get_event() function visualize locations specific events. demonstrate request data specific regions using gfwr’s built-options, well use custom region provided user.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/articles/making-maps.html","id":"setup","dir":"Articles","previous_headings":"Overview","what":"Setup","title":"Making maps with `gfwr`","text":"get started, first load gfwr package. Make sure API key set .Renviron file (see Authorization section gfwr README) vignette, ’ll also use tidyverse packages data wrangling plotting, well sf creating manipulating spatial data rnaturalearth add reference data maps. make maps little nicer, let’s define custom ggplot2 theme color palette heatmaps apparent fishing effort. ’ll also define common date range use querying data.","code":"library(gfwr) #> ℹ Loading gfwr library(dplyr) library(tidyr) library(sf) library(rnaturalearth) library(rnaturalearthdata) library(glue) library(ggplot2) # Map theme with dark background map_theme <- ggplot2::theme_minimal() +    ggplot2::theme(     panel.border = element_blank(),      legend.position = \"bottom\", legend.box = \"vertical\",      legend.key.height = unit(3, \"mm\"),      legend.key.width = unit(20, \"mm\"),     legend.text = element_text(color = \"#848b9b\", size = 8),      legend.title = element_text(face = \"bold\", color = \"#363c4c\", size = 8, hjust = 0.5),      plot.title = element_text(face = \"bold\", color = \"#363c4c\", size = 10),      plot.subtitle = element_text(color = \"#363c4c\", size = 10),      axis.title = element_blank(),      axis.text = element_text(color = \"#848b9b\", size = 6)     )  # Palette for fishing activity map_effort_light <- c(\"#ffffff\", \"#eeff00\", \"#3b9088\",\"#0c276c\") start_date <- '2021-01-01' end_date <- '2021-03-31'"},{"path":"https://globalfishingwatch.github.io/gfwr/articles/making-maps.html","id":"making-heatmaps-of-apparent-fishing-effort-with-get_raster","dir":"Articles","previous_headings":"","what":"Making heatmaps of apparent fishing effort with get_raster()","title":"Making maps with `gfwr`","text":"gfwr function get_raster() provides aggregated gridded (e.g. raster) data AIS-based apparent fishing effort. designed provide data specific region, offering users ability select multiple built-region types specifying specific Exclusive Economic Zone (EEZ), Marine Protected Area (MPA), Regional Fisheries Management Organization (RFMO). list available regions type, label id, can accessed get_regions() function. gfwr also includes get_region_id() function get label id specific region using region_name argument. EEZs, region_name corresponds ISO3 code. Note , countries, ISO3 code return multiple regions. RFMOs, region_name corresponds RFMO abbreviation (e.g. \"ICCAT\") MPAs refers full name MPA. get_region_id() function also works reverse. region id passed numeric function region_name, corresponding region label can returned. especially useful events returned region ids want descriptive label. See information regions used GFW. Let’s start making map apparent fishing effort Italian EEZ. get_raster() function requires provide id specific region (shapefile, later). look Italian EEZ id eez_regions table just created, let’s use get_region_id(). get_raster() function allows users specify multiple criteria customize data download, including date range, spatial temporal resolution, grouping variables. See documentation get_raster() GFW APIs info parameter options. case, let’s request data time range 100th degree resolution grouped flag State: data includes fishing flag states, make map activity, first need summarize activity grid cell. Now can use ggplot2 plot data.  another example, let’s request low resolution apparent fishing effort data within jurisdiction Indian Ocean Tuna Commission (IOTC), grouped yearly gear type: time, instead aggregating activity, let’s plot activity specific gear type:","code":"eez_regions <- get_regions(region_source = 'EEZ') eez_regions #> # A tibble: 285 × 5 #>    iso   label                          id GEONAME                      POL_TYPE #>    <chr> <chr>                       <dbl> <chr>                        <chr>    #>  1 ASM   American Samoa               8444 United States Exclusive Eco… 200NM    #>  2 SHN   Ascension                    8379 British Exclusive Economic … 200NM    #>  3 COK   Cook Islands                 8446 New Zealand Exclusive Econo… 200NM    #>  4 FLK   Falkland / Malvinas Islands  8389 Overlapping claim Falkland … Overlap… #>  5 PYF   French Polynesia             8440 French Exclusive Economic Z… 200NM    #>  6 PCN   Pitcairn                     8439 British Exclusive Economic … 200NM    #>  7 SHN   Saint Helena                 8380 British Exclusive Economic … 200NM    #>  8 WSM   Samoa                        8445 Samoan Exclusive Economic Z… 200NM    #>  9 TON   Tonga                        8448 Tongan Exclusive Economic Z… 200NM    #> 10 SHN   Tristan da Cunha             8382 British Exclusive Economic … 200NM    #> # ℹ 275 more rows # Use get_region_id function to get EEZ code for Italy ita_eez_code <- get_region_id(region_name = \"ITA\", region_source = \"EEZ\") #> # A tibble: 1 × 5 #>   iso3  label    id GEONAME                         POL_TYPE #>   <chr> <chr> <dbl> <chr>                           <chr>    #> 1 ITA   Italy  5682 Italian Exclusive Economic Zone 200NM # Download data for the Italian EEZ eez_fish_df <- get_raster(   spatial_resolution = \"HIGH\",   temporal_resolution = \"YEARLY\",   group_by = \"FLAG\",   start_date = start_date,   end_date = end_date,   region = ita_eez_code$id,   region_source = \"EEZ\"   ) #> # A tibble: 69,557 × 6 #>      Lat   Lon `Time Range` flag  `Vessel IDs` `Apparent Fishing Hours` #>    <dbl> <dbl>        <dbl> <chr>        <dbl>                    <dbl> #>  1  42.8 14.2          2021 ITA              9                    36.9  #>  2  44.0 13.2          2021 ITA              5                     8.3  #>  3  41.9 12.0          2021 ITA              7                     9.13 #>  4  42.1 16.1          2021 ITA              4                     4.83 #>  5  40.8 14.0          2021 ITA              7                    22.4  #>  6  42.1 15.8          2021 ITA              4                     5.97 #>  7  41.9 16.3          2021 ITA              2                     6.3  #>  8  42.3 15.8          2021 ITA              6                     6.76 #>  9  41.3 13.0          2021 ITA              5                    11.0  #> 10  39.1  9.19         2021 ITA              1                     1.03 #> # ℹ 69,547 more rows eez_fish_all_df <- eez_fish_df %>%    group_by(Lat, Lon) %>%    summarize(fishing_hours = sum(`Apparent Fishing Hours`, na.rm = T)) #> `summarise()` has grouped output by 'Lat'. You can override using the `.groups` #> argument. eez_fish_all_df %>%    filter(fishing_hours >= 1) %>%   ggplot() +   geom_tile(aes(x = Lon,                 y = Lat,                 fill = fishing_hours)) +   geom_sf(data = ne_countries(returnclass = \"sf\", scale = \"medium\")) +   coord_sf(xlim = c(min(eez_fish_all_df$Lon),max(eez_fish_all_df$Lon)),            ylim = c(min(eez_fish_all_df$Lat),max(eez_fish_all_df$Lat))) +   scale_fill_gradientn(     trans = 'log10',     colors = map_effort_light,      na.value = NA,     labels = scales::comma) +   labs(title = \"Apparent fishing hours in the Italian EEZ\",        subtitle = glue(\"{start_date} to {end_date}\"),        fill = \"Fishing hours\") +   map_theme # Download data for the IOTC iotc_fish_df <- get_raster(   spatial_resolution = \"LOW\",   temporal_resolution = \"YEARLY\",   group_by = \"GEARTYPE\",   start_date = start_date,   end_date = end_date,   region = \"IOTC\",   region_source = \"RFMO\"   ) #> # A tibble: 106,054 × 6 #>      Lat   Lon `Time Range` geartype         `Vessel IDs` Apparent Fishing Hou…¹ #>    <dbl> <dbl>        <dbl> <chr>                   <dbl>                  <dbl> #>  1  -7.6  47.8         2021 drifting_longli…            8                  38.2  #>  2  -8    79.8         2021 drifting_longli…            2                   5.72 #>  3 -36.4 137.          2021 inconclusive                5                  19.0  #>  4  -9    65.6         2021 drifting_longli…            1                   0.27 #>  5  -7.1  40.9         2021 drifting_longli…            1                   1.49 #>  6  -7.9  54           2021 drifting_longli…            4                   7.33 #>  7  26.1  52.6         2021 fishing                     2                  11.5  #>  8 -36.2  42.9         2021 drifting_longli…            1                   2.51 #>  9  -5.2  47.4         2021 drifting_longli…            6                  16.0  #> 10  -7.2  45.7         2021 drifting_longli…            6                  15.7  #> # ℹ 106,044 more rows #> # ℹ abbreviated name: ¹​`Apparent Fishing Hours` iotc_p1 <- iotc_fish_df %>%    filter(geartype == 'drifting_longlines') %>%    filter(`Apparent Fishing Hours` >= 1) %>%    ggplot() +   geom_tile(aes(x = Lon,                 y = Lat,                 fill = `Apparent Fishing Hours`)) +   geom_sf(data = ne_countries(returnclass = \"sf\", scale = \"medium\")) +   coord_sf(xlim = c(min(iotc_fish_df$Lon),max(iotc_fish_df$Lon)),            ylim = c(min(iotc_fish_df$Lat),max(iotc_fish_df$Lat))) +   scale_fill_gradientn(     transform = 'log10',     breaks = c(1,10,100),     colors = map_effort_light,      na.value = NA,     labels = scales::comma) +   labs(title = \"Apparent fishing hours in the IOTC by drifting longlines\",        subtitle = glue(\"{start_date} to {end_date}\"),        fill = \"Fishing hours\") +   map_theme   iotc_p1"},{"path":"https://globalfishingwatch.github.io/gfwr/articles/making-maps.html","id":"when-your-api-request-times-out","dir":"Articles","previous_headings":"Making heatmaps of apparent fishing effort with get_raster()","what":"When your API request times out","title":"Making maps with `gfwr`","text":"API performance reasons, get_raster() function restricts individual queries single year data. However, even restriction, possible API request time completes. occurs, initial get_raster() call return error, subsequent API requests using gfwr get_ function return HTTP 429 error original request completes: Error httr2::req_perform(): ! HTTP 429 Many Requests. • application token currently enabled perform one concurrent report. need generate one report concurrently, contact us apis@globalfishingwatch.org Although data received, request still processed APIs become available completes. account , gfwr includes get_last_report() function, let’s users request results last API request get_raster(). get_last_report() function tell APIs still processing request download results request finished successfully. receive error message request finished resulted error ’s >30 minutes since last report generated using get_raster(). information, see Get last report generated endpoint documentation GFW API page. ’re struggling issue, suggest breaking request smaller individual requests binding results R.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/articles/making-maps.html","id":"plotting-vessel-events","dir":"Articles","previous_headings":"","what":"Plotting vessel events","title":"Making maps with `gfwr`","text":"get_event() function provides spatial data location specific vessel activities. currently five available event types (\"FISHING\",\"ENCOUNTER\",\"LOITERING\", \"PORT VISIT\", \"GAP\") vessel-types argument allow users request events different categories vessels (e.g. \"FISHING\", \"CARRIER\", \"CARGO\", etc.). also event-specific arguments specifying things like encounter types confidence levels. details, see get_event() function documentation GFW API documentation. example, use get_event() request encounter events fishing vessels refrigerated carrier vessels. ’ll restrict events within jurisdiction Indian Ocean Tuna Commission (IOTC) using region region_source arguments like previous example. Encounters events two rows per event represent vessels. row shares event ID (eventId), can extract eventId select one row per eventId remove duplicate positions. ’ll also use lon lat coordinates create sf object encounter event. assist plotting, let’s get bounding box encounter events. Now let’s add encounters layer previous map drifting longline effort IOTC use bounding box restrict plot area encounters.","code":"# using same example as above encounters_df <- get_event(event_type = \"ENCOUNTER\",                            encounter_types = \"CARRIER-FISHING\",                            start_date = start_date,                            end_date = end_date,                            region = \"IOTC\",                            region_source = \"RFMO\")  #> [1] \"Downloading 182 events from GFW\" encounters_sf_df <- encounters_df %>%    tidyr::separate(eventId, c(\"eventId\",\"vessel_number\")) %>%    filter(vessel_number == 1) %>%    sf::st_as_sf(coords = c(\"lon\",\"lat\"), crs = 4326) %>%    select(eventId, eventType, geometry) enc_bbox <- st_bbox(encounters_sf_df) iotc_p1 +   geom_sf(data = encounters_sf_df,            aes(color = eventType),            alpha = 0.7, size = 1) +   coord_sf(xlim = enc_bbox[c(1,3)],            ylim = enc_bbox[c(2,4)]) +   labs(title = 'Apparent fishing hours in the IOTC by drifting longlines and fishing vessel encounter events with carrier vessels',        color = 'Event type') #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one."},{"path":"https://globalfishingwatch.github.io/gfwr/articles/making-maps.html","id":"making-maps-for-custom-regions","dir":"Articles","previous_headings":"","what":"Making maps for custom regions","title":"Making maps with `gfwr`","text":"get_raster() get_event() functions also allow users download data within custom region providing GeoJSON polygon. facilitate , get_raster() get_event() functions allow users pass sf object region argument. demonstrate , ’ll first create tibble coordinates defining arbitrary polygon convert sf object. Plot sf object confirm created successfully.  Let’s create sf bounding box object region use plotting later. Although shape simple rectangle example, helpful using complex regions. Now ’re ready request data custom region get_raster() get_event(). events, ’ll request high-confidence port visits fishing vessels loitering events refrigerated cargo vessels , let’s summarize raster plot fishing activity fishing vessels combine two event datasets create sf objects event. Finally, let’s plot fishing effort raster overlay loitering events port visits.","code":"my_shp <- tibble(   lon = c(-96,-96,-66,-66,-96),   lat = c(-24,4,4,-24,-24)   ) %>%    sf::st_as_sf(coords = c(\"lon\",\"lat\"), crs = 4326) %>%    summarize(geometry = st_combine(geometry)) %>%    st_cast(\"POLYGON\") ggplot() +   geom_sf(data = ne_countries(returnclass = \"sf\", scale = \"small\")) +   geom_sf(     data = my_shp,      fill = NA,     color = 'red') +   map_theme my_shp_bbox <- st_bbox(my_shp) my_raster_df <- get_raster(   spatial_resolution = \"LOW\",   temporal_resolution = \"YEARLY\",   group_by = \"GEARTYPE\",   start_date = start_date,   end_date = end_date,   region = my_shp,   region_source = \"USER_SHAPEFILE\"   ) my_port_events_df <- get_event(event_type = \"PORT_VISIT\",                           confidences = 4,                           vessel_types = \"FISHING\",                           start_date = start_date,                           end_date = end_date,                           region = my_shp,                           region_source = \"USER_SHAPEFILE\")  #> [1] \"Downloading 4119 events from GFW\" my_loitering_events_df <- get_event(event_type = \"LOITERING\",                                     vessel_types = \"CARRIER\",                                     start_date = start_date,                                     end_date = end_date,                                     region = my_shp,                                     region_source = \"USER_SHAPEFILE\")  #> [1] \"Downloading 50 events from GFW\" my_raster_all_df <- my_raster_df %>%    group_by(Lat, Lon) %>%    summarize(fishing_hours = sum(`Apparent Fishing Hours`, na.rm = T)) #> `summarise()` has grouped output by 'Lat'. You can override using the `.groups` #> argument. my_events_sf <- my_port_events_df %>%    select(eventId, lon, lat, eventType) %>%    bind_rows(     my_loitering_events_df %>%        select(eventId, lon, lat, eventType)   ) %>%    sf::st_as_sf(coords = c(\"lon\",\"lat\"), crs = 4326) %>%    dplyr::select(eventId, eventType, geometry) my_raster_all_df %>%    filter(fishing_hours > 1) %>%    ggplot() +   geom_tile(aes(x = Lon,                 y = Lat,                 fill = fishing_hours)) +   geom_sf(data = my_events_sf,           aes(color = eventType),           alpha = 0.7) +   geom_sf(data = ne_countries(returnclass = 'sf', scale = 'medium')) +   coord_sf(xlim = my_shp_bbox[c(1,3)],            ylim = my_shp_bbox[c(2,4)]) +   scale_fill_gradientn(     transform = 'log10',     colors = map_effort_light,      na.value = NA) +   labs(     title = 'Fishing hours, loitering events, and port visits',     subtitle = glue(\"{start_date} to {end_date}\"),     fill = 'Fishing hours',     color = 'Event type'   ) +   map_theme"},{"path":"https://globalfishingwatch.github.io/gfwr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tyler Clavelle. Author. Rocío Joo. Author. Nate Miller. Author. Andrea Sánchez-Tapia. Author, maintainer.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Clavelle T, Joo R, Miller N, Sánchez-Tapia (2025). gfwr: Access data Global Fishing Watch APIs. R package version 2.0.4, https://github.com/GlobalFishingWatch/gfwr.","code":"@Manual{,   title = {gfwr: Access data from Global Fishing Watch APIs},   author = {Tyler Clavelle and Rocío Joo and Nate Miller and Andrea Sánchez-Tapia},   year = {2025},   note = {R package version 2.0.4},   url = {https://github.com/GlobalFishingWatch/gfwr}, }"},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"gfwr-access-data-from-global-fishing-watch-apis-","dir":"","previous_headings":"","what":"Access data from Global Fishing Watch APIs","title":"Access data from Global Fishing Watch APIs","text":"Important version gfwr gives access Global Fishing Watch API version 3. Starting April 30th, 2024, official API version. latest API releases, please check API release notes Python package communicate Global Fishing Watch APIs released April 2025. Check gfw-api-python-client repository. gfwr R package simple wrapper Global Fishing Watch (GFW) APIs. provides convenient functions freely pull GFW data directly R tidy formats. package currently works following APIs: Vessels API: vessel search identity based AIS self reported data public registry information Events API: encounters, loitering, port visits, AIS-disabling events fishing events based AIS data Gridded apparent fishing effort (4Wings API): apparent fishing effort based AIS data Note: See Terms Use page Global Fishing Watch APIs information API licenses rate limits.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access data from Global Fishing Watch APIs","text":"can install recent version gfwr using: gfwr also rOpenSci R-universe, can installed like : everything installed, can load use gfwr scripts library(gfwr)","code":"# Check/install remotes if (!require(\"remotes\"))   install.packages(\"remotes\")  remotes::install_github(\"GlobalFishingWatch/gfwr\",                         dependencies = TRUE) install.packages(\"gfwr\",                   repos = c(\"https://globalfishingwatch.r-universe.dev\",                            \"https://cran.r-project.org\")) library(gfwr)"},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"authorization","dir":"","previous_headings":"","what":"Authorization","title":"Access data from Global Fishing Watch APIs","text":"use gfwr requires GFW API token, users can request GFW API Portal. Save token .Renviron file using usethis::edit_r_environ() adding variable named GFW_TOKEN file (GFW_TOKEN=\"PASTE_YOUR_TOKEN_HERE\"). Save .Renviron file restart R session make edit effective. gfwr functions set use key = gfw_auth() default general shouldn’t need refer key function calls. token configuration done properly see following error: case need specify key can use gfw_auth() save object fetch key directly .Renviron file examples package documentation omit explicit call key.","code":"Error in `httr2::req_perform()`: ! HTTP 401 Unauthorized. key <- gfw_auth() key <- Sys.getenv(\"GFW_TOKEN\")"},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"vessels-api","dir":"","previous_headings":"","what":"Vessels API","title":"Access data from Global Fishing Watch APIs","text":"get_vessel_info() function allows get vessel identity details Vessels API. two search types: search, id. query takes single identifier can MMSI, IMO, callsign, shipname input identifies vessels match. search allows use complex search logical clauses (, ) fuzzy matching terms LIKE, using SQL syntax (see examples function) includes adds information public registries. Options “MATCH_CRITERIA”, “OWNERSHIP” “AUTHORIZATIONS”","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"basic-search-by-identity-markers-search_type--search","dir":"","previous_headings":"Vessels API","what":"Basic search by identity markers (search_type = \"search\")","title":"Access data from Global Fishing Watch APIs","text":"get information vessel using MMSI, IMO number, callsign name, search can done directly using number string. example, look vessel MMSI = 224224000:","code":"get_vessel_info(query = 224224000,                 search_type = \"search\") #> 1 total vessels #> $dataset #> # A tibble: 1 × 1 #>   dataset                            #>   <chr>                              #> 1 public-global-vessel-identity:v3.0 #>  #> $registryInfoTotalRecords #> # A tibble: 1 × 1 #>   registryInfoTotalRecords #>                      <int> #> 1                        1 #>  #> $registryInfo #> # A tibble: 1 × 16 #>   index recordId        sourceCode ssvid flag  shipname nShipname callsign imo   #>   <dbl> <chr>           <list>     <chr> <chr> <chr>    <chr>     <chr>    <chr> #> 1     1 e0c9823749264a… <chr [7]>  2242… ESP   AGURTZA… AGURTZAB… EBSJ     8733… #> # ℹ 7 more variables: transmissionDateFrom <chr>, transmissionDateTo <chr>, #> #   geartypes <chr>, lengthM <int>, tonnageGt <dbl>, vesselInfoReference <chr>, #> #   extraFields <list> #>  #> $registryOwners #> # A tibble: 0 × 2 #> # ℹ 2 variables: index <dbl>, <list> <list> #>  #> $registryPublicAuthorizations #> # A tibble: 3 × 5 #>   index dateFrom             dateTo               ssvid     sourceCode #>   <dbl> <chr>                <chr>                <chr>     <list>     #> 1     1 2019-01-01T00:00:00Z 2019-10-01T00:00:00Z 224224000 <chr [1]>  #> 2     1 2012-01-01T00:00:00Z 2019-01-01T00:00:00Z 224224000 <chr [1]>  #> 3     1 2019-10-15T00:00:00Z 2023-02-01T00:00:00Z 306118000 <chr [1]>  #>  #> $combinedSourcesInfo #> # A tibble: 2 × 10 #>   index vesselId              geartypes_name geartypes_source geartypes_yearFrom #>   <dbl> <chr>                 <chr>          <chr>                         <int> #> 1     1 3c99c326d-dd2e-175d-… PURSE_SEINE_S… GFW_VESSEL_LIST                2015 #> 2     1 6632c9eb8-8009-abdb-… PURSE_SEINE_S… GFW_VESSEL_LIST                2019 #> # ℹ 5 more variables: geartypes_yearTo <int>, shiptypes_name <chr>, #> #   shiptypes_source <chr>, shiptypes_yearFrom <int>, shiptypes_yearTo <int> #>  #> $selfReportedInfo #> # A tibble: 2 × 14 #>   index vesselId   ssvid shipname nShipname flag  callsign imo   messagesCounter #>   <dbl> <chr>      <chr> <chr>    <chr>     <chr> <chr>    <chr>           <int> #> 1     1 6632c9eb8… 3061… AGURTZA… AGURTZAB… BES   PJBL     8733…          418581 #> 2     1 3c99c326d… 2242… AGURTZA… AGURTZAB… ESP   EBSJ     8733…          135057 #> # ℹ 5 more variables: positionsCounter <int>, sourceCode <list>, #> #   matchFields <chr>, transmissionDateFrom <chr>, transmissionDateTo <chr>"},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"complex-searches-using-where","dir":"","previous_headings":"Vessels API","what":"Complex searches using where","title":"Access data from Global Fishing Watch APIs","text":"specific searches (e.g. \"imo = '8300949'\"), combine different fields (\"imo = '8300949' ssvid = '214182732'\") fuzzy matching (\"shipname LIKE '%GABU REEFE%' imo = '8300949'\"), use parameter instead query:","code":"get_vessel_info(where = \"shipname LIKE '%GABU REEFE%' OR imo = '8300949'\",                 search_type = \"search\") #> 1 total vessels #> $dataset #> # A tibble: 1 × 1 #>   dataset                            #>   <chr>                              #> 1 public-global-vessel-identity:v3.0 #>  #> $registryInfoTotalRecords #> # A tibble: 1 × 1 #>   registryInfoTotalRecords #>                      <int> #> 1                        1 #>  #> $registryInfo #> # A tibble: 1 × 17 #>   index recordId        sourceCode ssvid flag  shipname nShipname callsign imo   #>   <dbl> <chr>           <list>     <chr> <chr> <chr>    <chr>     <chr>    <chr> #> 1     1 b16ca93ea690fc… <chr [3]>  6290… GMB   GABU RE… GABUREEF… C5J278   8300… #> # ℹ 8 more variables: latestVesselInfo <lgl>, transmissionDateFrom <chr>, #> #   transmissionDateTo <chr>, geartypes <chr>, lengthM <dbl>, tonnageGt <int>, #> #   vesselInfoReference <chr>, extraFields <list> #>  #> $registryOwners #> # A tibble: 4 × 7 #>   index name                   flag  ssvid     sourceCode dateFrom        dateTo #>   <dbl> <chr>                  <chr> <chr>     <list>     <chr>           <chr>  #> 1     1 FISHING CARGO SERVICES PAN   629009266 <chr [2]>  2024-08-07T10:… 2025-… #> 2     1 FISHING CARGO SERVICES PAN   613590000 <chr [2]>  2022-01-24T09:… 2024-… #> 3     1 FISHING CARGO SERVICES PAN   214182732 <chr [2]>  2019-02-23T11:… 2022-… #> 4     1 FISHING CARGO SERVICES PAN   616852000 <chr [2]>  2012-01-08T19:… 2019-… #>  #> $registryPublicAuthorizations #> # A tibble: 0 × 2 #> # ℹ 2 variables: index <dbl>, <list> <list> #>  #> $combinedSourcesInfo #> # A tibble: 7 × 10 #>   index vesselId              geartypes_name geartypes_source geartypes_yearFrom #>   <dbl> <chr>                 <chr>          <chr>                         <int> #> 1     1 1da8dbc23-3c48-d5ce-… CARRIER        GFW_VESSEL_LIST                2022 #> 2     1 58cf536b1-1fca-dac3-… CARRIER        GFW_VESSEL_LIST                2012 #> 3     1 0b7047cb5-58c8-6e63-… CARRIER        GFW_VESSEL_LIST                2019 #> 4     1 9827ea1ea-a120-f374-… CARRIER        GFW_VESSEL_LIST                2024 #> 5     1 9827ea1ea-a120-f374-… CARRIER        GFW_VESSEL_LIST                2024 #> 6     1 9827ea1ea-a120-f374-… CARRIER        GFW_VESSEL_LIST                2025 #> 7     1 9827ea1ea-a120-f374-… CARRIER        GFW_VESSEL_LIST                2025 #> # ℹ 5 more variables: geartypes_yearTo <int>, shiptypes_name <chr>, #> #   shiptypes_source <chr>, shiptypes_yearFrom <int>, shiptypes_yearTo <int> #>  #> $selfReportedInfo #> # A tibble: 4 × 14 #>   index vesselId   ssvid shipname nShipname flag  callsign imo   messagesCounter #>   <dbl> <chr>      <chr> <chr>    <chr>     <chr> <chr>    <chr>           <int> #> 1     1 9827ea1ea… 6290… GABU RE… GABUREEF… GMB   C5J278   8300…          759956 #> 2     1 1da8dbc23… 6135… GABU RE… GABUREEF… CMR   TJMC996  8300…          973251 #> 3     1 0b7047cb5… 2141… GABU RE… GABUREEF… MDA   ER2732   8300…          642750 #> 4     1 58cf536b1… 6168… GABU RE… GABUREEF… COM   D6FJ2    8300…          469834 #> # ℹ 5 more variables: positionsCounter <int>, sourceCode <list>, #> #   matchFields <chr>, transmissionDateFrom <chr>, transmissionDateTo <chr>"},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"search-by-vessel-id","dir":"","previous_headings":"Vessels API","what":"Search by vessel ID","title":"Access data from Global Fishing Watch APIs","text":"search vesselId, use parameter ids specify search_type = \"id\". Note: vesselId internal ID generated Global Fishing Watch connect data accross APIs involves combination vessel tracking data information. can retrieved using get_vessel_info() fetching vector responses inside $selfReportedInfo$vesselId. See identity vignette information.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"single-vessel-ids","dir":"","previous_headings":"Vessels API > Search by vessel ID","what":"Single vessel IDs","title":"Access data from Global Fishing Watch APIs","text":"","code":"get_vessel_info(ids = \"8c7304226-6c71-edbe-0b63-c246734b3c01\",                 search_type = \"id\") #> 1 total vessels #> $dataset #> # A tibble: 1 × 1 #>   dataset                            #>   <chr>                              #> 1 public-global-vessel-identity:v3.0 #>  #> $registryInfoTotalRecords #> # A tibble: 1 × 1 #>   registryInfoTotalRecords #>                      <int> #> 1                        5 #>  #> $registryInfo #> # A tibble: 5 × 17 #>   index recordId        sourceCode ssvid flag  shipname nShipname callsign imo   #>   <dbl> <chr>           <list>     <chr> <chr> <chr>    <chr>     <chr>    <chr> #> 1     1 a8d00ce54b37ad… <chr [4]>  2733… RUS   FRIO FO… FRIOFORW… UCRZ     9076… #> 2     1 a8d00ce54b37ad… <chr [3]>  5111… PLW   FRIO FO… FRIOFORW… T8A4891  9076… #> 3     1 a8d00ce54b37ad… <chr [7]>  2106… CYP   FRIO FO… FRIOFORW… 5BWC3    9076… #> 4     1 a8d00ce54b37ad… <chr [2]>  3413… KNA   FRIO FO… FRIOFORW… V4JQ3    9076… #> 5     1 a8d00ce54b37ad… <chr [3]>  3546… PAN   FRIOAEG… FRIOAEGE… 3FGY4    9076… #> # ℹ 8 more variables: latestVesselInfo <lgl>, transmissionDateFrom <chr>, #> #   transmissionDateTo <chr>, geartypes <chr>, lengthM <int>, tonnageGt <int>, #> #   vesselInfoReference <chr>, extraFields <list> #>  #> $registryOwners #> # A tibble: 3 × 7 #>   index name    flag  ssvid     sourceCode dateFrom             dateTo           #>   <dbl> <chr>   <chr> <chr>     <list>     <chr>                <chr>            #> 1     1 COLINER RUS   273379740 <chr [2]>  2015-02-27T10:59:43Z 2025-05-31T23:5… #> 2     1 COLINER CYP   511101495 <chr [1]>  2024-07-04T14:27:04Z 2024-07-24T14:2… #> 3     1 COLINER CYP   210631000 <chr [1]>  2013-05-15T20:19:43Z 2024-07-04T14:1… #>  #> $registryPublicAuthorizations #> # A tibble: 3 × 5 #>   index dateFrom             dateTo               ssvid     sourceCode #>   <dbl> <chr>                <chr>                <chr>     <list>     #> 1     1 2023-01-01T00:00:00Z 2024-12-31T00:00:00Z 210631000 <chr [1]>  #> 2     1 2020-01-01T00:00:00Z 2024-12-01T00:00:00Z 210631000 <chr [1]>  #> 3     1 2024-08-09T00:00:00Z 2025-05-01T00:00:00Z 273379740 <chr [1]>  #>  #> $combinedSourcesInfo #> # A tibble: 13 × 10 #>    index vesselId             geartypes_name geartypes_source geartypes_yearFrom #>    <dbl> <chr>                <chr>          <chr>                         <int> #>  1     1 3c81a942b-bf0a-f476… CARRIER        GFW_VESSEL_LIST                2015 #>  2     1 8c7304226-6c71-edbe… CARRIER        GFW_VESSEL_LIST                2013 #>  3     1 da1cd7e1b-b8d0-539c… CARRIER        GFW_VESSEL_LIST                2019 #>  4     1 da1cd7e1b-b8d0-539c… CARRIER        GFW_VESSEL_LIST                2019 #>  5     1 da1cd7e1b-b8d0-539c… CARRIER        GFW_VESSEL_LIST                2019 #>  6     1 da1cd7e1b-b8d0-539c… CARRIER        GFW_VESSEL_LIST                2025 #>  7     1 da1cd7e1b-b8d0-539c… CARRIER        GFW_VESSEL_LIST                2025 #>  8     1 da1cd7e1b-b8d0-539c… CARRIER        GFW_VESSEL_LIST                2025 #>  9     1 da1cd7e1b-b8d0-539c… CARRIER        GFW_VESSEL_LIST                2015 #> 10     1 da1cd7e1b-b8d0-539c… CARRIER        GFW_VESSEL_LIST                2015 #> 11     1 da1cd7e1b-b8d0-539c… CARRIER        GFW_VESSEL_LIST                2015 #> 12     1 0edad163f-f53d-9ddb… CARRIER        GFW_VESSEL_LIST                2024 #> 13     1 0cb77880e-ee49-2ce4… CARRIER        GFW_VESSEL_LIST                2012 #> # ℹ 5 more variables: geartypes_yearTo <int>, shiptypes_name <chr>, #> #   shiptypes_source <chr>, shiptypes_yearFrom <int>, shiptypes_yearTo <int> #>  #> $selfReportedInfo #> # A tibble: 1 × 14 #>   index vesselId   ssvid shipname nShipname flag  callsign imo   messagesCounter #>   <dbl> <chr>      <chr> <chr>    <chr>     <chr> <chr>    <chr>           <int> #> 1     1 8c7304226… 2106… FRIO FO… FRIOFORW… CYP   5BWC3    9076…         3369802 #> # ℹ 5 more variables: positionsCounter <int>, sourceCode <list>, #> #   matchFields <chr>, transmissionDateFrom <chr>, transmissionDateTo <chr>"},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"multiple-vessel-ids","dir":"","previous_headings":"Vessels API > Search by vessel ID","what":"Multiple vessel IDs","title":"Access data from Global Fishing Watch APIs","text":"specify one vesselId, can submit vector: Check function documentation examples function arguments dedicated vignette information vessel identity markers outputs retrieved.","code":"get_vessel_info(ids = c(\"8c7304226-6c71-edbe-0b63-c246734b3c01\",                         \"6583c51e3-3626-5638-866a-f47c3bc7ef7c\",                         \"71e7da672-2451-17da-b239-857831602eca\"),                 search_type = \"id\") #> 3 total vessels #> $dataset #> # A tibble: 3 × 1 #>   dataset                            #>   <chr>                              #> 1 public-global-vessel-identity:v3.0 #> 2 public-global-vessel-identity:v3.0 #> 3 public-global-vessel-identity:v3.0 #>  #> $registryInfoTotalRecords #> # A tibble: 3 × 1 #>   registryInfoTotalRecords #>                      <int> #> 1                        5 #> 2                        2 #> 3                        1 #>  #> $registryInfo #> # A tibble: 8 × 17 #>   index recordId        sourceCode ssvid flag  shipname nShipname callsign imo   #>   <dbl> <chr>           <list>     <chr> <chr> <chr>    <chr>     <chr>    <chr> #> 1     1 a8d00ce54b37ad… <chr [4]>  2733… RUS   FRIO FO… FRIOFORW… UCRZ     9076… #> 2     1 a8d00ce54b37ad… <chr [3]>  5111… PLW   FRIO FO… FRIOFORW… T8A4891  9076… #> 3     1 a8d00ce54b37ad… <chr [7]>  2106… CYP   FRIO FO… FRIOFORW… 5BWC3    9076… #> 4     1 a8d00ce54b37ad… <chr [2]>  3413… KNA   FRIO FO… FRIOFORW… V4JQ3    9076… #> 5     1 a8d00ce54b37ad… <chr [3]>  3546… PAN   FRIOAEG… FRIOAEGE… 3FGY4    9076… #> 6     2 b82d02e5c2c11e… <chr [6]>  4417… KOR   ADRIA    ADRIA     DTBY3    8919… #> 7     2 b82d02e5c2c11e… <chr [5]>  4417… KOR   PREMIER  PREMIER   DTBY3    8919… #> 8     3 685862e0626f62… <chr [6]>  5480… PHL   JOHNREY… JOHNREYN… DUQA7    8118… #> # ℹ 8 more variables: latestVesselInfo <lgl>, transmissionDateFrom <chr>, #> #   transmissionDateTo <chr>, geartypes <chr>, lengthM <dbl>, tonnageGt <dbl>, #> #   vesselInfoReference <chr>, extraFields <list> #>  #> $registryOwners #> # A tibble: 3 × 7 #>   index name    flag  ssvid     sourceCode dateFrom             dateTo           #>   <dbl> <chr>   <chr> <chr>     <list>     <chr>                <chr>            #> 1     1 COLINER RUS   273379740 <chr [2]>  2015-02-27T10:59:43Z 2025-05-31T23:5… #> 2     1 COLINER CYP   511101495 <chr [1]>  2024-07-04T14:27:04Z 2024-07-24T14:2… #> 3     1 COLINER CYP   210631000 <chr [1]>  2013-05-15T20:19:43Z 2024-07-04T14:1… #>  #> $registryPublicAuthorizations #> # A tibble: 8 × 5 #>   index dateFrom             dateTo               ssvid     sourceCode #>   <dbl> <chr>                <chr>                <chr>     <list>     #> 1     1 2023-01-01T00:00:00Z 2024-12-31T00:00:00Z 210631000 <chr [1]>  #> 2     1 2020-01-01T00:00:00Z 2024-12-01T00:00:00Z 210631000 <chr [1]>  #> 3     1 2024-08-09T00:00:00Z 2025-05-01T00:00:00Z 273379740 <chr [1]>  #> 4     2 2015-10-08T00:00:00Z 2020-07-21T00:00:00Z 441734000 <chr [1]>  #> 5     2 2012-01-01T00:00:00Z 2013-09-19T00:00:00Z 441734000 <chr [1]>  #> 6     2 2013-09-20T00:00:00Z 2025-01-01T00:00:00Z 441734000 <chr [1]>  #> 7     3 2012-01-01T00:00:00Z 2017-10-25T00:00:00Z 548012100 <chr [1]>  #> 8     3 2019-02-10T18:02:49Z 2025-05-01T00:00:00Z 548012100 <chr [1]>  #>  #> $combinedSourcesInfo #> # A tibble: 17 × 10 #>    index vesselId             geartypes_name geartypes_source geartypes_yearFrom #>    <dbl> <chr>                <chr>          <chr>                         <int> #>  1     1 3c81a942b-bf0a-f476… CARRIER        GFW_VESSEL_LIST                2015 #>  2     1 8c7304226-6c71-edbe… CARRIER        GFW_VESSEL_LIST                2013 #>  3     1 da1cd7e1b-b8d0-539c… CARRIER        GFW_VESSEL_LIST                2019 #>  4     1 da1cd7e1b-b8d0-539c… CARRIER        GFW_VESSEL_LIST                2019 #>  5     1 da1cd7e1b-b8d0-539c… CARRIER        GFW_VESSEL_LIST                2019 #>  6     1 da1cd7e1b-b8d0-539c… CARRIER        GFW_VESSEL_LIST                2025 #>  7     1 da1cd7e1b-b8d0-539c… CARRIER        GFW_VESSEL_LIST                2025 #>  8     1 da1cd7e1b-b8d0-539c… CARRIER        GFW_VESSEL_LIST                2025 #>  9     1 da1cd7e1b-b8d0-539c… CARRIER        GFW_VESSEL_LIST                2015 #> 10     1 da1cd7e1b-b8d0-539c… CARRIER        GFW_VESSEL_LIST                2015 #> 11     1 da1cd7e1b-b8d0-539c… CARRIER        GFW_VESSEL_LIST                2015 #> 12     1 0edad163f-f53d-9ddb… CARRIER        GFW_VESSEL_LIST                2024 #> 13     1 0cb77880e-ee49-2ce4… CARRIER        GFW_VESSEL_LIST                2012 #> 14     2 aca119c29-95dd-f5c4… TUNA_PURSE_SE… COMBINATION_OF_…               2012 #> 15     2 6583c51e3-3626-5638… TUNA_PURSE_SE… COMBINATION_OF_…               2013 #> 16     3 55889aefb-bef9-224c… TUNA_PURSE_SE… COMBINATION_OF_…               2017 #> 17     3 71e7da672-2451-17da… TUNA_PURSE_SE… COMBINATION_OF_…               2017 #> # ℹ 5 more variables: geartypes_yearTo <int>, shiptypes_name <chr>, #> #   shiptypes_source <chr>, shiptypes_yearFrom <int>, shiptypes_yearTo <int> #>  #> $selfReportedInfo #> # A tibble: 3 × 14 #>   index vesselId   ssvid shipname nShipname flag  callsign imo   messagesCounter #>   <dbl> <chr>      <chr> <chr>    <chr>     <chr> <chr>    <chr>           <int> #> 1     1 8c7304226… 2106… FRIO FO… FRIOFORW… CYP   5BWC3    9076…         3369802 #> 2     2 6583c51e3… 4417… ADRIA    ADRIA     KOR   DTBY3    <NA>           360249 #> 3     3 71e7da672… 5480… JOHN RE… JOHNREYN… PHL   DUQA-7   8118…          133081 #> # ℹ 5 more variables: positionsCounter <int>, sourceCode <list>, #> #   matchFields <chr>, transmissionDateFrom <chr>, transmissionDateTo <chr>"},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"events-api","dir":"","previous_headings":"","what":"Events API","title":"Access data from Global Fishing Watch APIs","text":"get_event() function allows get data specific vessel activities Events API. Event types include apparent fishing events, potential transshipment events (two-vessel encounters loitering refrigerated carrier vessels), port visits, AIS-disabling events (“gaps”). Find information events caveat documentation.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"events-in-a-given-time-range","dir":"","previous_headings":"Events API","what":"Events in a given time range","title":"Access data from Global Fishing Watch APIs","text":"can get events given date range. specifying vessels, response return results vessels. Note: recommend trying large downloads, encounters vessels long period time. possibly return time (524) errors. API team working another API specific large downloads future.","code":"get_event(event_type = \"ENCOUNTER\",           start_date = \"2020-01-01\",           end_date = \"2020-01-02\") #> [1] \"Downloading 288 events from GFW\" #> # A tibble: 288 × 17 #>    start               end                 eventId        eventType    lat   lon #>    <dttm>              <dttm>              <chr>          <chr>      <dbl> <dbl> #>  1 2019-12-30 11:00:00 2020-01-06 14:00:00 3067e6a37d326… encounter   9.49 -99.1 #>  2 2019-12-31 12:00:00 2020-01-01 13:50:00 c11e047615243… encounter -17.6  -79.3 #>  3 2020-01-01 00:00:00 2020-01-01 02:40:00 3b109ab4e8fc4… encounter  34.7  129.  #>  4 2020-01-01 00:40:00 2020-01-01 08:20:00 3de48259ac99d… encounter  26.6  120.  #>  5 2020-01-01 17:30:00 2020-01-02 04:30:00 4d721ad85f1cf… encounter  68.7   50.3 #>  6 2020-01-01 00:00:00 2020-01-01 11:20:00 255d53a814907… encounter  44.5  136.  #>  7 2020-01-01 17:40:00 2020-01-01 23:30:00 24df89e2316c7… encounter  38.3  121.  #>  8 2020-01-01 14:20:00 2020-01-01 16:30:00 96ccfc41e8c64… encounter   6.18  99.7 #>  9 2020-01-01 13:20:00 2020-01-01 20:50:00 8663bd73cdffd… encounter -45.4  -60.6 #> 10 2020-01-01 18:20:00 2020-01-01 22:20:00 1f565991a7c23… encounter  38.5  121.  #> # ℹ 278 more rows #> # ℹ 11 more variables: regions <list>, boundingBox <list>, distances <list>, #> #   vesselId <chr>, vessel_name <chr>, vessel_ssvid <chr>, vessel_flag <chr>, #> #   vessel_type <chr>, vessel_publicAuthorizations <list>, #> #   vessel_nextPort <list>, event_info <list>"},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"events-in-a-specific-area","dir":"","previous_headings":"Events API","what":"Events in a specific area","title":"Access data from Global Fishing Watch APIs","text":"can provide polygon sf format region code (EEZ code) filter raster. Check function documentation information parameters region region_source","code":"# fishing events in user shapefile test_polygon <- sf::st_bbox(c(xmin = -70,                               xmax = -40,                               ymin = -10,                               ymax = 5),   crs = 4326) |>   sf::st_as_sfc() |>   sf::st_as_sf() get_event(event_type = \"FISHING\",                start_date = \"2020-10-01\",                end_date = \"2020-10-31\",                region = test_polygon,                region_source = \"USER_SHAPEFILE\") #> [1] \"Downloading 59 events from GFW\" #> # A tibble: 59 × 17 #>    start               end                 eventId         eventType   lat   lon #>    <dttm>              <dttm>              <chr>           <chr>     <dbl> <dbl> #>  1 2020-10-20 03:23:35 2020-10-20 16:14:26 97790a3a15dc5f… fishing   4.89  -51.8 #>  2 2020-10-01 12:54:31 2020-10-01 21:26:31 083f87bff85928… fishing   4.75  -51.6 #>  3 2020-10-01 23:29:31 2020-10-03 03:11:17 4d538f3b37e2ae… fishing   4.74  -51.5 #>  4 2020-10-05 08:50:27 2020-10-06 17:35:21 c75671db2488b8… fishing   4.71  -51.5 #>  5 2020-10-03 05:50:14 2020-10-05 03:35:27 b68b49e7e3655c… fishing   4.73  -51.5 #>  6 2020-10-30 12:22:15 2020-10-30 13:51:56 8524e3c9d9c25f… fishing   3.79  -50.1 #>  7 2020-10-03 21:08:06 2020-10-04 03:31:11 3ce13bbe2752ec… fishing   4.75  -51.6 #>  8 2020-10-17 17:59:45 2020-10-17 19:45:10 b08ba788b149c2… fishing   0.222 -47.7 #>  9 2020-10-24 15:44:03 2020-10-24 18:56:19 fbf1567e527d4d… fishing   0.259 -47.9 #> 10 2020-10-18 21:29:13 2020-10-18 22:28:02 eb82a3cc27a9e0… fishing   4.95  -51.6 #> # ℹ 49 more rows #> # ℹ 11 more variables: regions <list>, boundingBox <list>, distances <list>, #> #   vesselId <chr>, vessel_name <chr>, vessel_ssvid <chr>, vessel_flag <chr>, #> #   vessel_type <chr>, vessel_publicAuthorizations <list>, #> #   vessel_nextPort <lgl>, event_info <list>"},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"events-for-specific-vessels","dir":"","previous_headings":"Events API","what":"Events for specific vessels","title":"Access data from Global Fishing Watch APIs","text":"extract events specific vessels, Events API needs vesselId input, always need use get_vessel_info() first extract vesselId $selfReportedInfo response.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"single-vessel-events","dir":"","previous_headings":"Events API > Events for specific vessels","what":"Single vessel events","title":"Access data from Global Fishing Watch APIs","text":"results show vessel’s story grouped two vesselIds. get list port visits vessel, can use single vesselId interest: get whole event history, ’s better use whole vector vesselId vessel. Notice following request provides results previous one: Note: Try narrowing search using start_date end_date request large returns time error (524) date range provided get_event() using start_date end_date, event overlapping range returned, including events start prior start_date end end_date. just start_date end_date provided, results include events end start_date begin prior end_date, respectively. Note: encounter events events two vessels, single event represented twice data, vessel. capture information link related data rows, id field encounter events includes additional suffix (1 2) separated period. vessel field also contain different information specific vessel.","code":"vessel_info <- get_vessel_info(query = 224224000) #> 1 total vessels vessel_info$selfReportedInfo #> # A tibble: 2 × 14 #>   index vesselId   ssvid shipname nShipname flag  callsign imo   messagesCounter #>   <dbl> <chr>      <chr> <chr>    <chr>     <chr> <chr>    <chr>           <int> #> 1     1 6632c9eb8… 3061… AGURTZA… AGURTZAB… BES   PJBL     8733…          418581 #> 2     1 3c99c326d… 2242… AGURTZA… AGURTZAB… ESP   EBSJ     8733…          135057 #> # ℹ 5 more variables: positionsCounter <int>, sourceCode <list>, #> #   matchFields <chr>, transmissionDateFrom <chr>, transmissionDateTo <chr> id <- vessel_info$selfReportedInfo$vesselId id #> [1] \"6632c9eb8-8009-abdb-baf9-b67d65f20510\" #> [2] \"3c99c326d-dd2e-175d-626f-a3c488a4342b\"  get_event(event_type = \"PORT_VISIT\",           vessels = id[1],           confidences = 4           ) #> [1] \"Downloading 25 events from GFW\" #> # A tibble: 25 × 16 #>    start               end                 eventId        eventType   lat    lon #>    <dttm>              <dttm>              <chr>          <chr>     <dbl>  <dbl> #>  1 2020-01-27 08:04:38 2020-02-23 10:18:02 abed2e0c06e4e… port_vis… 16.9  -25.0  #>  2 2021-08-01 12:58:44 2021-08-16 16:00:15 a26f4940e189c… port_vis…  5.20  -4.02 #>  3 2020-03-05 13:28:59 2020-03-10 02:26:24 0d845cb306614… port_vis…  5.20  -4.02 #>  4 2020-04-19 06:16:46 2020-04-21 14:02:19 5ad5c93c5448d… port_vis… 28.1  -15.4  #>  5 2020-11-01 14:17:48 2020-11-06 12:25:53 f39043169c3c4… port_vis…  5.20  -4.02 #>  6 2020-05-05 06:52:54 2020-05-07 14:22:35 729df630342f0… port_vis…  5.20  -4.02 #>  7 2021-10-17 09:52:51 2021-10-17 16:06:40 d133e151d9edd… port_vis… 14.6  -17.4  #>  8 2021-11-11 18:41:10 2021-11-20 18:43:26 af0cb5d7ee288… port_vis…  5.20  -4.04 #>  9 2020-06-25 09:13:36 2020-06-25 20:31:10 29863e18bfa98… port_vis… 16.9  -25.0  #> 10 2020-07-06 06:45:06 2020-07-12 09:13:39 6845cffacfe25… port_vis…  5.20  -4.02 #> # ℹ 15 more rows #> # ℹ 10 more variables: regions <list>, boundingBox <list>, distances <list>, #> #   vesselId <chr>, vessel_name <chr>, vessel_ssvid <chr>, vessel_flag <chr>, #> #   vessel_type <chr>, vessel_nextPort <lgl>, event_info <list> get_event(event_type = \"PORT_VISIT\",           vessels = id, #using the whole vector of vesselIds           confidences = 4           ) #> [1] \"Downloading 74 events from GFW\" #> # A tibble: 74 × 16 #>    start               end                 eventId        eventType   lat    lon #>    <dttm>              <dttm>              <chr>          <chr>     <dbl>  <dbl> #>  1 2019-09-29 05:40:18 2019-10-02 17:16:39 baa809792afe6… port_vis… 14.6  -17.4  #>  2 2016-05-18 19:31:04 2016-05-22 14:20:05 8f19c373a1d4b… port_vis…  5.20  -4.02 #>  3 2017-06-11 13:06:41 2017-06-11 20:24:21 37dd9b53c8e95… port_vis… 14.7  -17.4  #>  4 2017-07-20 01:24:50 2017-08-17 13:14:35 c3a91322707ba… port_vis…  5.20  -4.02 #>  5 2016-02-25 14:26:38 2016-03-01 13:21:21 6265aa07f2c16… port_vis…  5.23  -3.97 #>  6 2016-06-26 15:08:16 2016-06-30 10:39:03 bf64dfbc753b4… port_vis…  5.19  -4.08 #>  7 2019-12-06 11:02:09 2019-12-11 10:20:04 bcd967c59306c… port_vis…  5.20  -4.04 #>  8 2021-08-01 12:58:44 2021-08-16 16:00:15 a26f4940e189c… port_vis…  5.20  -4.02 #>  9 2020-01-11 11:18:49 2020-01-15 11:54:49 889beb4fc4bfb… port_vis…  5.23  -4.02 #> 10 2017-09-26 05:57:58 2017-09-30 09:45:51 bd92902851ea3… port_vis…  5.20  -4.02 #> # ℹ 64 more rows #> # ℹ 10 more variables: regions <list>, boundingBox <list>, distances <list>, #> #   vesselId <chr>, vessel_name <chr>, vessel_ssvid <chr>, vessel_flag <chr>, #> #   vessel_type <chr>, vessel_nextPort <lgl>, event_info <list>"},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"events-for-multiple-vessels","dir":"","previous_headings":"Events API > Events for specific vessels","what":"Events for multiple vessels","title":"Access data from Global Fishing Watch APIs","text":"another example, let’s combine Vessels Events APIs get fishing events list USA-flagged trawlers: list returns 6486 vesselIds belonging 4163 vessels. fetch events list vessels, use vesselId column send vessels parameter get_event() function. clarity, try send groups vesselIds belong vessels. , can check index column $selfReportedInfo dataset. Note: get_event() can receive several vesselIds time fail character length whole request long (~100,000 characters). means fail error HTTP 422: Unprocessable entity many vesselIds requested, value can around 2,800 vesselIds depending parameters search. example, send vesselIds corresponding first twenty vessels response: 51 vesselIds corresponding 20 vessels. Let’s pass vector vesselIds Events API. Now get list fishing events trawlers January, 2020: columns starting vessel hold vessel-related information event: vesselId, vessel_name, ssvid (MMSI), flag, vessel type public authorizations. events available, get_event() function returns nothing.","code":"# Download the list of USA trawlers usa_trawlers <- get_vessel_info(   where = \"flag='USA' AND geartypes='TRAWLERS'\",   search_type = \"search\",   quiet = TRUE    ) # Set quiet = TRUE if you want the output to return silently usa_trawlers$selfReportedInfo #> # A tibble: 6,662 × 14 #>    index vesselId  ssvid shipname nShipname flag  callsign imo   messagesCounter #>    <dbl> <chr>     <chr> <chr>    <chr>     <chr> <chr>    <chr>           <int> #>  1     1 d32af732… 3680… SUPERMA… SUPERMAN… USA   WDJ8890  <NA>           267397 #>  2     1 5446e7cd… 3680… SUPERMA… SUPERMAN… USA   <NA>     <NA>             6184 #>  3     2 47b94476… 3668… ORION    ORION     USA   <NA>     <NA>            23007 #>  4     3 9f555214… 3680… PELICAN  PELICAN   USA   WDJ8253  <NA>           401525 #>  5     3 15cea26f… 3680… PELICAN  PELICAN   USA   <NA>     <NA>              407 #>  6     4 0dddd2a8… 3673… SHAMROCK SHAMROCK  USA   WDD8722  <NA>             2720 #>  7     4 695b254f… 3673… SHAMROCK SHAMROCK  USA   <NA>     <NA>              477 #>  8     4 ac994bda… 3673… <NA>     <NA>      USA   WDD8722  <NA>             3179 #>  9     5 bc29946f… 3667… ALEX     ALEX      USA   WDA2216  <NA>           840772 #> 10     5 0e4052b1… 3667… <NA>     <NA>      USA   WDA2216  <NA>             8403 #> # ℹ 6,652 more rows #> # ℹ 5 more variables: positionsCounter <int>, sourceCode <list>, #> #   matchFields <chr>, transmissionDateFrom <chr>, transmissionDateTo <chr> each_USA_trawler <- usa_trawlers$selfReportedInfo[, c(\"index\", \"vesselId\")]  # how many vessels correspond to the first twenty vessels.  (twenty_usa_trawlers <- each_USA_trawler %>% filter(index <= 20)) #> # A tibble: 51 × 2 #>    index vesselId                              #>    <dbl> <chr>                                 #>  1     1 d32af7320-0748-9a63-abd7-48ad721e63b8 #>  2     1 5446e7cd1-1f75-4672-d859-01211df72fba #>  3     2 47b944765-5819-b2ab-8c2e-cfc82bd2e82c #>  4     3 9f5552145-50ed-92f4-4514-5177b1a6511d #>  5     3 15cea26f5-57ad-acac-4cbf-b45cefb7ab04 #>  6     4 0dddd2a83-3626-24f1-0fe6-3c4d45bbb409 #>  7     4 695b254f7-7e6c-ff50-dc63-55139d9e0101 #>  8     4 ac994bdab-b59c-9fcc-659e-40179e5dddfb #>  9     5 bc29946f2-2b0b-9613-054a-cd59327226d9 #> 10     5 0e4052b12-2e16-969f-d3e3-2a266be74255 #> # ℹ 41 more rows fishing_events <- get_event(event_type = \"FISHING\",                             vessels = twenty_usa_trawlers$vesselId,                             start_date = \"2020-01-01\",                             end_date = \"2020-02-01\") #> [1] \"Downloading 63 events from GFW\" fishing_events #> # A tibble: 63 × 17 #>    start               end                 eventId        eventType   lat    lon #>    <dttm>              <dttm>              <chr>          <chr>     <dbl>  <dbl> #>  1 2020-01-22 03:07:24 2020-01-23 03:57:57 7812ab3b7950f… fishing    38.0  -73.9 #>  2 2020-01-05 03:57:26 2020-01-05 05:24:51 0a79fe4183554… fishing    44.4 -124.  #>  3 2020-01-18 06:54:55 2020-01-18 07:29:56 5ff9724477b70… fishing    41.4  -69.3 #>  4 2020-01-25 09:38:35 2020-01-25 10:34:01 6b4c28449e7fe… fishing    40.1  -72.7 #>  5 2020-01-16 15:07:04 2020-01-16 17:16:20 db046d9ebb664… fishing    41.4  -69.3 #>  6 2020-01-17 18:15:20 2020-01-17 23:14:40 4fe0db533d5a6… fishing    41.5  -70.2 #>  7 2020-01-17 09:10:03 2020-01-17 17:57:00 e5d2760a2cd5e… fishing    41.5  -70.1 #>  8 2020-01-05 15:00:22 2020-01-06 00:35:34 873cf3ee8755c… fishing    41.4  -68.7 #>  9 2020-01-15 21:35:14 2020-01-16 11:01:12 2c309e235a0d1… fishing    41.4  -68.7 #> 10 2020-01-16 17:38:41 2020-01-17 07:47:12 1b4256ca28af9… fishing    41.4  -69.6 #> # ℹ 53 more rows #> # ℹ 11 more variables: regions <list>, boundingBox <list>, distances <list>, #> #   vesselId <chr>, vessel_name <chr>, vessel_ssvid <chr>, vessel_flag <chr>, #> #   vessel_type <chr>, vessel_publicAuthorizations <list>, #> #   vessel_nextPort <lgl>, event_info <list> fishing_events %>%    dplyr::select(starts_with(\"vessel\")) #> # A tibble: 63 × 7 #>    vesselId                     vessel_name vessel_ssvid vessel_flag vessel_type #>    <chr>                        <chr>       <chr>        <chr>       <chr>       #>  1 64907178b-b02a-f401-afa1-b3… SUSAN L     366211560    USA         fishing     #>  2 0203066e4-4f99-c97a-7b94-0e… PROSPECTOR  367428110    USA         fishing     #>  3 35eb371c0-088a-1382-098a-c7… STARBRITE   367707710    USA         fishing     #>  4 35eb371c0-088a-1382-098a-c7… STARBRITE   367707710    USA         fishing     #>  5 35eb371c0-088a-1382-098a-c7… STARBRITE   367707710    USA         fishing     #>  6 35eb371c0-088a-1382-098a-c7… STARBRITE   367707710    USA         fishing     #>  7 35eb371c0-088a-1382-098a-c7… STARBRITE   367707710    USA         fishing     #>  8 35eb371c0-088a-1382-098a-c7… STARBRITE   367707710    USA         fishing     #>  9 35eb371c0-088a-1382-098a-c7… STARBRITE   367707710    USA         fishing     #> 10 35eb371c0-088a-1382-098a-c7… STARBRITE   367707710    USA         fishing     #> # ℹ 53 more rows #> # ℹ 2 more variables: vessel_publicAuthorizations <list>, vessel_nextPort <lgl> get_event(event_type = \"FISHING\",           vessels = twenty_usa_trawlers$vesselId[2],           start_date = \"2020-01-01\",           end_date = \"2020-01-01\"           ) #> [1] \"Your request returned zero results\" #> NULL"},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"apparent-fishing-effort-api","dir":"","previous_headings":"","what":"Apparent fishing effort API","title":"Access data from Global Fishing Watch APIs","text":"get_raster() function gets raster 4Wings API converts response data frame. order use , specify: spatial resolution, can LOW (0.1 degree) HIGH (0.01 degree) temporal resolution, can HOURLY, DAILY, MONTHLY, YEARLY ENTIRE. variable group : FLAG, GEARTYPE, FLAGANDGEARTYPE, MMSI VESSEL_ID date range note: must 366 days less region polygon sf format region code (EEZ code) filter raster source specified region. Currently, EEZ, MPA, RFMO USER_SHAPEFILE (sf shapefiles).","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"user-defined-shapefile","dir":"","previous_headings":"Apparent fishing effort API","what":"User-defined shapefile","title":"Access data from Global Fishing Watch APIs","text":"can load sf shapefile area interest fetch apparent fishing effort area using region_source = \"USER_SHAPEFILE\" region = [YOUR_SHAPE]. added sample shapefile inside gfwr show \"USER_SHAPEFILE\" works:","code":"data(\"test_shape\")  test_shape #> Simple feature collection with 1 feature and 0 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 56.74815 ymin: 0 xmax: 70 ymax: 21.79799 #> Geodetic CRS:  WGS 84 #>                         geometry #> 1 MULTIPOLYGON (((70 15.20471...  get_raster(   spatial_resolution = \"LOW\",   temporal_resolution = \"YEARLY\",   group_by = \"FLAG\",   start_date = \"2021-01-01\",   end_date = \"2021-02-01\",   region_source = \"USER_SHAPEFILE\",   region = test_shape   ) #> # A tibble: 2,686 × 6 #>      Lat   Lon `Time Range` flag  `Vessel IDs` `Apparent Fishing Hours` #>    <dbl> <dbl>        <dbl> <chr>        <dbl>                    <dbl> #>  1  15.1  60.4         2021 CHN              2                    15.6  #>  2  15.2  61.4         2021 CHN              3                    13.3  #>  3  15.7  63.7         2021 CHN              2                    14.6  #>  4  15.6  62.7         2021 CHN              1                    11.7  #>  5   4.6  65.7         2021 TWN              1                     1.82 #>  6   5.8  67.2         2021 TWN              1                    10.2  #>  7  15.4  60.6         2021 CHN              1                     7.81 #>  8  12.5  62.2         2021 CHN              1                     5.78 #>  9   6    68.8         2021 <NA>             1                     5.46 #> 10   3.5  65.5         2021 LKA              1                     3.98 #> # ℹ 2,676 more rows"},{"path":[]},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"eez","dir":"","previous_headings":"Apparent fishing effort API > Apparent fishing effort in preloaded EEZ, RFMOs and MPAs","what":"EEZ","title":"Access data from Global Fishing Watch APIs","text":"want raster data particular EEZ, can use get_region_id() function get EEZ id, enter code region_name argument get_raster() instead region shapefile (region_source = \"EEZ\"): search just one word name EEZ decide one want: results , let’s say ’re interested French Exclusive Economic Zone, 5677","code":"# use EEZ function to get EEZ code of Cote d'Ivoire code_eez <- get_region_id(region_name = \"CIV\", region_source = \"EEZ\")  get_raster(spatial_resolution = \"LOW\",            temporal_resolution = \"YEARLY\",            group_by = \"FLAG\",            start_date = \"2021-01-01\",            end_date = \"2021-10-01\",            region = code_eez$id,            region_source = \"EEZ\") #> # A tibble: 595 × 6 #>      Lat   Lon `Time Range` flag  `Vessel IDs` `Apparent Fishing Hours` #>    <dbl> <dbl>        <dbl> <chr>        <dbl>                    <dbl> #>  1   4.5  -3.8         2021 PAN              1                     2.24 #>  2   2.1  -6.4         2021 BLZ              1                     3.98 #>  3   4.5  -6.7         2021 CHN              1                    35.4  #>  4   3.3  -6.6         2021 BLZ              1                     4.05 #>  5   1.4  -6.8         2021 BLZ              1                     3.27 #>  6   4.7  -5.8         2021 CHN              1                     3.62 #>  7   4.4  -3.7         2021 BLZ              1                     0.72 #>  8   1.7  -5.6         2021 BLZ              1                     0.39 #>  9   4    -3.6         2021 BES              1                     2.99 #> 10   3.1  -4           2021 FRA              1                     5.1  #> # ℹ 585 more rows (get_region_id(region_name = \"France\", region_source = \"EEZ\")) #> # A tibble: 3 × 5 #>   iso3  label                                id GEONAME                 POL_TYPE #>   <chr> <chr>                             <dbl> <chr>                   <chr>    #> 1 <NA>  Joint regime area: Spain / France 48966 Joint regime area: Spa… Joint r… #> 2 <NA>  Joint regime area: France / Italy 48976 Joint regime area: Fra… Joint r… #> 3 FRA   France                             5677 French Exclusive Econo… 200NM get_raster(spatial_resolution = \"LOW\",            temporal_resolution = \"YEARLY\",            group_by = \"FLAG\",            start_date = \"2021-01-01\",            end_date = \"2021-10-01\",            region = 5677,            region_source = \"EEZ\"            ) #> # A tibble: 5,618 × 6 #>      Lat   Lon `Time Range` flag  `Vessel IDs` `Apparent Fishing Hours` #>    <dbl> <dbl>        <dbl> <chr>        <dbl>                    <dbl> #>  1  45.2  -3           2021 FRA             13                   239.   #>  2  45.1  -3.3         2021 ESP             21                    62.2  #>  3  41.3   8.9         2021 ITA              1                     2.16 #>  4  43.4   4.5         2021 FRA             12                    86.4  #>  5  44.4  -1.6         2021 FRA              4                    61.7  #>  6  46.2  -3.8         2021 FRA             11                    76.7  #>  7  46.1  -3.5         2021 ESP              5                    14.2  #>  8  49.9  -1.2         2021 FRA              9                    82.5  #>  9  43.3   4.4         2021 FRA             20                   342.   #> 10  50     0.2         2021 GBR              3                   165.   #> # ℹ 5,608 more rows"},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"marine-protected-areas-mpas","dir":"","previous_headings":"Apparent fishing effort API > Apparent fishing effort in preloaded EEZ, RFMOs and MPAs","what":"Marine Protected Areas (MPAs)","title":"Access data from Global Fishing Watch APIs","text":"similar approach can used search specific Marine Protected Area, case Phoenix Island Protected Area (PIPA)","code":"# use region id function to get MPA code of Phoenix Island Protected Area code_mpa <- get_region_id(region_name = \"Phoenix\",                           region_source = \"MPA\") code_mpa #> # A tibble: 2 × 2 #>   id        label                                                                #>   <chr>     <chr>                                                                #> 1 309888    Phoenix Islands Protected Area - Protected Area                      #> 2 555512002 Phoenix Islands Protected Area - World Heritage Site (natural or mi… get_raster(spatial_resolution = \"LOW\",            temporal_resolution = \"YEARLY\",            group_by = \"FLAG\",            start_date = \"2015-01-01\",            end_date = \"2015-06-01\",            region = code_mpa$id[1],            region_source = \"MPA\") #> # A tibble: 38 × 6 #>      Lat   Lon `Time Range` flag  `Vessel IDs` `Apparent Fishing Hours` #>    <dbl> <dbl>        <dbl> <chr>        <dbl>                    <dbl> #>  1  -3.6 -176.         2015 KOR              1                     1.98 #>  2  -2.8 -176.         2015 KOR              1                    10.4  #>  3  -3.5 -176.         2015 KOR              1                     3.11 #>  4  -1   -170.         2015 KOR              1                     2.39 #>  5  -4.1 -176.         2015 KOR              1                     2.67 #>  6  -2.9 -176.         2015 FSM              1                     2.77 #>  7  -3   -176.         2015 FSM              1                     2.16 #>  8  -2.6 -176.         2015 KOR              1                    13.9  #>  9  -3.6 -176.         2015 KIR              1                     6.07 #> 10  -2.3 -176.         2015 TWN              1                    17.3  #> # ℹ 28 more rows"},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"regional-fisheries-management-organizations-rfmos","dir":"","previous_headings":"Apparent fishing effort API > Apparent fishing effort in preloaded EEZ, RFMOs and MPAs","what":"Regional Fisheries Management Organizations (RFMOs)","title":"Access data from Global Fishing Watch APIs","text":"also possible filter rasters regional fisheries management organizations (RFMO) like \"ICCAT\", \"IATTC\", \"IOTC\", \"CCSBT\" \"WCPFC\". Note: complete list MPAs, RFMOs EEZ, check function get_regions()","code":"get_raster(spatial_resolution = \"LOW\",            temporal_resolution = \"DAILY\",            group_by = \"FLAG\",            start_date = \"2021-01-01\",            end_date = \"2021-01-04\",            region = \"ICCAT\",            region_source = \"RFMO\") #> # A tibble: 16,878 × 6 #>      Lat   Lon `Time Range` flag  `Vessel IDs` `Apparent Fishing Hours` #>    <dbl> <dbl> <date>       <chr>        <dbl>                    <dbl> #>  1  44.5 -57.1 2021-01-02   CAN              1                     0.43 #>  2  14.3 -17.2 2021-01-02   SEN              3                     6    #>  3 -30     2.5 2021-01-01   SEN              1                     0.57 #>  4  19.8 -17.2 2021-01-01   FRA              1                     1.81 #>  5  57.8  10.4 2021-01-03   DNK              6                     5.91 #>  6  59.3  -3.6 2021-01-02   GBR              1                     0.34 #>  7   8.6 -26.9 2021-01-01   JPN              1                     1.96 #>  8  50.1  -4.5 2021-01-02   GBR              3                     4.81 #>  9  55.5   8.2 2021-01-03   DNK              4                     7.09 #> 10  16.5 -18.1 2021-01-01   JPN              1                     0.53 #> # ℹ 16,868 more rows"},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"when-your-api-request-times-out","dir":"","previous_headings":"Apparent fishing effort API","what":"When your API request times out","title":"Access data from Global Fishing Watch APIs","text":"API performance reasons, get_raster() function restricts individual queries single year data. However, even restriction, possible API request time completes. occurs, initial get_raster() call return HTTP 524 error, subsequent API requests using gfwr get_ function return HTTP 429 error original request completes: Error httr2::req_perform(): ! HTTP 429 Many Requests. • application token currently enabled perform one concurrent report. need generate one report concurrently, contact us apis@globalfishingwatch.org Although data received, request still processed APIs become available completes. account , gfwr includes get_last_report() function, lets users request results last API request get_raster(). get_last_report() function tell APIs still processing request download results request finished successfully. receive error message request finished resulted error ’s >30 minutes since last report generated using get_raster(). information, see Get last report generated endpoint documentation Global Fishing Watch API page.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/index.html","id":"reverse-region-id-search","dir":"","previous_headings":"","what":"Reverse region id search","title":"Access data from Global Fishing Watch APIs","text":"get_region_id() function also works reverse. region id passed numeric function region_name, corresponding region label iso3 code can returned. especially useful events returned regions. Using example twenty trawlers fishing events, fishing_events, can see eez information returned numeric code \"eez\" column. can apply get_region_id() numeric vector extract labels:","code":"fishing_events <- get_event(event_type = \"FISHING\",                             vessels = twenty_usa_trawlers$vesselId,                             start_date = \"2020-01-01\",                             end_date = \"2020-02-01\") %>%   # extract EEZ id code   dplyr::mutate(eez = as.character(     purrr::map(purrr::map(regions, purrr::pluck, \"eez\"),                paste0, collapse = \",\"))) %>%   dplyr::select(eez, eventId, eventType, start, end, lat, lon)  #> [1] \"Downloading 63 events from GFW\"  fishing_events #> # A tibble: 63 × 7 #>    eez   eventId  eventType start               end                   lat    lon #>    <chr> <chr>    <chr>     <dttm>              <dttm>              <dbl>  <dbl> #>  1 8456  0a79fe4… fishing   2020-01-05 03:57:26 2020-01-05 05:24:51  44.4 -124.  #>  2 8456  7812ab3… fishing   2020-01-22 03:07:24 2020-01-23 03:57:57  38.0  -73.9 #>  3 8456  0b0e500… fishing   2020-01-25 12:32:16 2020-01-25 13:32:16  39.9  -73.0 #>  4 8456  cf7977e… fishing   2020-01-18 08:32:40 2020-01-19 20:25:48  41.4  -69.3 #>  5 8456  c5409b5… fishing   2020-01-13 15:19:52 2020-01-13 17:47:54  41.5  -69.3 #>  6 8456  6640019… fishing   2020-01-14 04:56:04 2020-01-14 08:13:47  41.4  -68.7 #>  7 8456  ea4db5b… fishing   2020-01-13 20:43:47 2020-01-14 04:08:49  41.4  -68.7 #>  8 8456  ce3b328… fishing   2020-01-26 14:54:28 2020-01-27 10:03:45  39.6  -72.8 #>  9 8456  6937c9b… fishing   2020-01-25 13:58:44 2020-01-26 13:47:48  39.8  -72.8 #> 10 8456  ea857a1… fishing   2020-01-31 05:25:15 2020-01-31 06:43:40  42.8 -125.  #> # ℹ 53 more rows fishing_events %>%    mutate(eez_name = purrr::map_df(as.numeric(fishing_events$eez),                                   ~get_region_id(region_name = .x,                                                  region_source = \"EEZ\"))$label) %>%    dplyr::relocate(eez, eez_name) #> # A tibble: 63 × 8 #>    eez   eez_name      eventId eventType start               end                 #>    <chr> <chr>         <chr>   <chr>     <dttm>              <dttm>              #>  1 8456  United States 0a79fe… fishing   2020-01-05 03:57:26 2020-01-05 05:24:51 #>  2 8456  United States 7812ab… fishing   2020-01-22 03:07:24 2020-01-23 03:57:57 #>  3 8456  United States 0b0e50… fishing   2020-01-25 12:32:16 2020-01-25 13:32:16 #>  4 8456  United States cf7977… fishing   2020-01-18 08:32:40 2020-01-19 20:25:48 #>  5 8456  United States c5409b… fishing   2020-01-13 15:19:52 2020-01-13 17:47:54 #>  6 8456  United States 664001… fishing   2020-01-14 04:56:04 2020-01-14 08:13:47 #>  7 8456  United States ea4db5… fishing   2020-01-13 20:43:47 2020-01-14 04:08:49 #>  8 8456  United States ce3b32… fishing   2020-01-26 14:54:28 2020-01-27 10:03:45 #>  9 8456  United States 6937c9… fishing   2020-01-25 13:58:44 2020-01-26 13:47:48 #> 10 8456  United States ea857a… fishing   2020-01-31 05:25:15 2020-01-31 06:43:40 #> # ℹ 53 more rows #> # ℹ 2 more variables: lat <dbl>, lon <dbl>"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_endpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to get API dataset name for given event type — get_endpoint","title":"Function to get API dataset name for given event type — get_endpoint","text":"Function get API dataset name given event type","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_endpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to get API dataset name for given event type — get_endpoint","text":"","code":"get_endpoint(dataset_type, ...)"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_endpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to get API dataset name for given event type — get_endpoint","text":"dataset_type Type dataset get API dataset name . can \"raster\", \"ENCOUNTER\", \"LOITERING\", \"FISHING\", \"PORT_VISIT\", \"GAP\", \"EEZ\", \"RFMO\" \"MPA\" ... arguments depend dataset type.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Get events from API and convert response to tibble — get_event","title":"Get events from API and convert response to tibble — get_event","text":"Get events API convert response tibble","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get events from API and convert response to tibble — get_event","text":"","code":"get_event(   event_type,   start_date = \"2012-01-01\",   end_date = \"2024-12-31\",   sort = \"+start\",   vessels = NULL,   flags = NULL,   vessel_types = NULL,   region_source = NULL,   region = NULL,   duration = 1,   encounter_types = NULL,   gap_intentional_disabling = NULL,   confidences = c(2, 3, 4),   key = gfw_auth(),   quiet = FALSE,   print_request = FALSE,   ... )"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get events from API and convert response to tibble — get_event","text":"event_type Type event get data . vector combination \"ENCOUNTER\", \"FISHING\", \"GAP\", \"LOITERING\", \"PORT_VISIT\" start_date Start date range search events, YYYY-MM-DD format including date end_date End date range search events, YYYY-MM-DD format excluding date sort sort events. default, +start, sorts events ascending order (+) start dates events. possible values -start, +end, -end. vessels vector vesselIds, obtained via get_vessel_info(). maximum number vesselIds depends character length whole request, request fail error HTTP 422: Unprocessable entity many vesselIds sent. value around 2,800 vessels, depending parameters request. flags ISO3 code flag vessels. NULL default. vessel_types vector vessel types, combination : \"FISHING\", \"CARRIER\", \"SUPPORT\", \"PASSENGER\", \"OTHER_NON_FISHING\", \"SEISMIC_VESSEL\", \"BUNKER_OR_TANKER\", \"CARGO\". region_source Optional. Source region ('EEZ','MPA', 'RFMO' 'USER_SHAPEFILE'). region Optional required value region_source specified. region_source set \"EEZ\", \"MPA\" \"RFMO\", GFW region code (see get_region_id()). region_source = \"USER_SHAPEFILE\", sf shapefile area interest. duration Minimum duration event (minutes). default value 1. encounter_types useful event_type = \"ENCOUNTER\". Filters types vessels encounter. vector combination : \"CARRIER-FISHING\", \"FISHING-CARRIER\", \"FISHING-SUPPORT\", \"SUPPORT-FISHING\". gap_intentional_disabling Logical. useful event_type = \"GAP\". Filters intentional gap events according Global Fishing Watch algorithms. Check gaps API documentation details. confidences useful event_type = \"PORT_VISIT\". Confidence levels port visits. Low-confidence port visits (confidence 1) available download. See API documentation details key Character, API token. Defaults gfw_auth(). quiet Boolean. Whether print number events returned request print_request Boolean. Whether print request, debugging purposes. contacting GFW team useful send string ... arguments","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_event.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get events from API and convert response to tibble — get_event","text":"currently four available event types events provided three vessel types - fishing, carrier, support vessels. Fishing events (event_type = \"FISHING\") specific fishing vessels loitering events (event_type = \"LOITERING\") specific carrier vessels. Port visits (event_type = \"PORT_VISIT\") encounters (event_type = \"ENCOUNTER\") available vessel types. details various event types, see GFW API documentation. Encounter events involve multiple vessels one row returned vessel involved encounter. example, encounter carrier fishing vessel (CARRIER-FISHING) one row fishing vessel one carrier vessel. id field encounter events two components separated .. first component unique id encounter event vessels involved encounter. second component integer used distinguish different vessels encounter.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_event.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get events from API and convert response to tibble — get_event","text":"","code":"if (FALSE) { # \\dontrun{ library(gfwr) # port visits get_event(event_type = \"PORT_VISIT\",           vessels = c(\"8c7304226-6c71-edbe-0b63-c246734b3c01\"),           start_date = \"2017-01-26\",           end_date = \"2017-12-31\",           confidence = c(3, 4), # only for port visits           key = gfw_auth())  #encounters  get_event(event_type = \"ENCOUNTER\",  vessels = c(\"8c7304226-6c71-edbe-0b63-c246734b3c01\"),   start_date = \"2012-01-30\",   end_date = \"2024-02-04\",   key = gfw_auth())  # fishing  get_event(event_type = \"FISHING\",  vessels = c(\"9b3e9019d-d67f-005a-9593-b66b997559e5\"),   start_date = \"2017-01-26\",   end_date = \"2023-02-04\",   key = gfw_auth())  # GAPS  get_event(event_type = \"GAP\",  vessels = c(\"e0c9823749264a129d6b47a7aabce377\",   \"8c7304226-6c71-edbe-0b63-c246734b3c01\"),   start_date = \"2017-01-26\",   end_date = \"2023-02-04\",   key = gfw_auth())  # loitering  get_event(event_type = \"LOITERING\",  vessels = c(\"e0c9823749264a129d6b47a7aabce377\",   \"8c7304226-6c71-edbe-0b63-c246734b3c01\"),   start_date = \"2017-01-26\",   end_date = \"2023-02-04\",   key = gfw_auth())  # encounter type  get_event(event_type = \"ENCOUNTER\",  encounter_types = \"CARRIER-FISHING\",  start_date = \"2020-01-01\",  end_date = \"2020-01-31\",  key = gfw_auth())  # vessel types  get_event(event_type = \"ENCOUNTER\",  vessel_types = c(\"CARRIER\", \"FISHING\"),  start_date = \"2020-01-01\",  end_date = \"2020-01-31\",  key = gfw_auth()) # fishing events in Senegal EEZ get_event(event_type = 'FISHING',               start_date = \"2020-10-01\",               end_date = \"2020-12-31\",               region = 8371,               region_source = 'EEZ',               flags = 'CHN',               key = gfw_auth())  # fishing events in user shapefile test_polygon <- sf::st_bbox(c(xmin = -70, xmax = -40, ymin = -10, ymax = 5),  crs = 4326) |>  sf::st_as_sfc() |>  sf::st_as_sf() get_event(event_type = 'FISHING',               start_date = \"2022-01-01\",               end_date = \"2024-01-01\",               region = test_polygon,               region_source = 'USER_SHAPEFILE',               key = gfw_auth())               } # }"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_event_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Base function to get events stats from API and convert response to data frame — get_event_stats","title":"Base function to get events stats from API and convert response to data frame — get_event_stats","text":"Base function get events stats API convert response data frame","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_event_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base function to get events stats from API and convert response to data frame — get_event_stats","text":"","code":"get_event_stats(   event_type,   start_date = \"2012-01-01\",   end_date = \"2024-12-31\",   interval = NULL,   vessels = NULL,   flags = NULL,   vessel_types = NULL,   region_source = NULL,   region = NULL,   duration = 1,   encounter_types = NULL,   confidences = c(2, 3, 4),   key = gfw_auth(),   quiet = FALSE,   print_request = FALSE,   ... )"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_event_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base function to get events stats from API and convert response to data frame — get_event_stats","text":"event_type Type event get data . vector combination \"ENCOUNTER\", \"FISHING\", \"GAP\", \"LOITERING\", \"PORT_VISIT\" start_date Start date range search events, YYYY-MM-DD format including date end_date End date range search events, YYYY-MM-DD format excluding date interval Time series granularity. Must string. Possible values: 'HOUR', 'DAY', 'MONTH', 'YEAR'. vessels vector vesselIds, obtained via get_vessel_info() function flags ISO3 code flag vessels. Null default. vessel_types Optional. vector vessel types, combination : \"FISHING\", \"CARRIER\", \"SUPPORT\", \"PASSENGER\", \"OTHER_NON_FISHING\", \"SEISMIC_VESSEL\", \"BUNKER_OR_TANKER\", \"CARGO\" region_source Optional mandatory using argument region. Source region. 'EEZ','MPA', 'RFMO', value argument region must code region. 'USER_SHAPEFILE', region sf object region GFW region code (EEZ, MPA RFMO code) formatted geojson shape. See Details formatting geojson. duration minimum duration event minutes. default value 1. encounter_types useful event_type = \"ENCOUNTER\". Filters types vessels encounter. vector combination : \"CARRIER-FISHING\", \"FISHING-CARRIER\", \"FISHING-SUPPORT\", \"SUPPORT-FISHING\" confidences useful event_type = \"PORT_VISIT\". Confidence levels (1-4) events. key Authorization token. Can obtained gfw_auth() function quiet Boolean. Whether print number events returned request print_request Boolean. Whether print request, debugging purposes. contacting GFW team useful send string ... arguments","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_event_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Base function to get events stats from API and convert response to data frame — get_event_stats","text":"currently four available event types events provided three vessel types - fishing, carrier, support vessels. Fishing events (event_type = \"FISHING\") specific fishing vessels loitering events (event_type = \"LOITERING\") specific carrier vessels. Port visits (event_type = \"PORT_VISIT\") encounters (event_type = \"ENCOUNTER\") available vessel types. details various event types, see GFW API documentation. user-defined geojson surrounded geojson tag, can created using simple paste:   sf shapefile, can also use function sf_to_geojson() obtain correctly-formatted geojson.","code":"geojson_tagged <- paste0('{\"geojson\":', your_geojson,'}')."},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_event_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base function to get events stats from API and convert response to data frame — get_event_stats","text":"","code":"if (FALSE) { # \\dontrun{ library(gfwr)  # stats for encounters involving Russian carriers in given time range get_event_stats(event_type = 'ENCOUNTER', encounter_types = c(\"CARRIER-FISHING\",\"FISHING-CARRIER\"), vessel_types = 'CARRIER', start_date = \"2018-01-01\", end_date = \"2023-01-31\", flags = 'RUS', duration = 60, interval = \"YEAR\", key = gfw_auth())  # port visits stats in a region (Senegal)  get_event_stats(event_type = 'PORT_VISIT', start_date = \"2018-01-01\", end_date = \"2019-01-31\", confidences = c('3','4'), region = 8371, region_source = 'EEZ', interval = \"YEAR\") } # }"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_identity_endpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to get API endpoint name for identity search — get_identity_endpoint","title":"Function to get API endpoint name for identity search — get_identity_endpoint","text":"Function get API endpoint name identity search","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_identity_endpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to get API endpoint name for identity search — get_identity_endpoint","text":"","code":"get_identity_endpoint(dataset_type, search_type, ids, ...)"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_identity_endpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to get API endpoint name for identity search — get_identity_endpoint","text":"dataset_type Type identity dataset get API dataset name . can vector combination \"support_vessel\", \"carrier_vessel\" \"fishing_vessel\" search_type Type vessel search perform. Can \"search\" \"id\". \"advanced\" longer use gfwr 2.0.0 basic advanced options can accessed parameters query ids optional, vector vessel ids ... arguments depend dataset type.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_last_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Base function to get status of last report generated — get_last_report","title":"Base function to get status of last report generated — get_last_report","text":"Function check status last API request sent get_raster().","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_last_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base function to get status of last report generated — get_last_report","text":"","code":"get_last_report(key = gfw_auth())"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_last_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base function to get status of last report generated — get_last_report","text":"key Authorization token. Can obtained gfw_auth() function","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_last_report.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Base function to get status of last report generated — get_last_report","text":"get_last_report() function tell APIs still processing request download results request finished successfully. receive error message request finished resulted error >30 minutes since last report generated using get_raster(). information, see https://globalfishingwatch.org/-apis/documentation#get-last-report-generated.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_last_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base function to get status of last report generated — get_last_report","text":"","code":"if (FALSE) { # \\dontrun{ get_last_report(key = gfw_auth()) } # }"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve apparent fishing effort and convert response to tibble — get_raster","title":"Retrieve apparent fishing effort and convert response to tibble — get_raster","text":"Retrieve apparent fishing effort convert response tibble","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve apparent fishing effort and convert response to tibble — get_raster","text":"","code":"get_raster(   spatial_resolution = NULL,   temporal_resolution = NULL,   start_date = \"2023-01-01\",   end_date = \"2023-12-31\",   region_source = NULL,   region = NULL,   group_by = NULL,   filter_by = NULL,   key = gfw_auth(),   print_request = FALSE )"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve apparent fishing effort and convert response to tibble — get_raster","text":"spatial_resolution Raster spatial resolution. Can \"LOW\" (0.1 degree) \"HIGH\" (0.01 degree). temporal_resolution Raster temporal resolution. Can \"HOURLY\", \"DAILY\", \"MONTHLY\", \"YEARLY\". start_date Required. Start date range search events, YYYY-MM-DD format including date. end_date Required. End date range search events, YYYY-MM-DD format excluding date. region_source Required. Source region: \"EEZ\", \"MPA\", \"RFMO\" \"USER_SHAPEFILE\". region Required. region_source set \"EEZ\", \"MPA\" \"RFMO\", GFW region code (see get_region_id()). region_source = \"USER_SHAPEFILE\", sf shapefile area interest. group_by Optional. Parameter group . Can \"VESSEL_ID\", \"FLAG\", \"GEARTYPE\", \"FLAGANDGEARTYPE\" \"MMSI\". filter_by Fields filter AIS-based apparent fishing effort. Possible options flag, shipname, geartype id (filter vessel ids). Receives SQL expressions like filter_by = \"flag ('ESP')\". key Character, API token. Defaults gfw_auth(). print_request Boolean. Whether print request, debugging purposes. contacting GFW team useful send string.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve apparent fishing effort and convert response to tibble — get_raster","text":"","code":"if (FALSE) { # \\dontrun{ library(gfwr) # using region codes code_eez <- get_region_id(region_name = \"CIV\", region_source = \"EEZ\") get_raster(spatial_resolution = \"LOW\",            temporal_resolution = \"YEARLY\",            group_by = \"FLAG\",            start_date = \"2021-01-01\",            end_date = \"2022-01-01\",            region = code_eez$id,            region_source = \"EEZ\",            key = gfw_auth(),            print_request = TRUE) code_mpa <- get_region_id(region_name = \"Galapagos\", region_source = \"MPA\") get_raster(spatial_resolution = \"LOW\",            temporal_resolution = \"MONTHLY\",            group_by = \"FLAG\",            start_date = \"2022-01-01\",            end_date = \"2023-01-01\",            region = code_mpa$id[3],            region_source = \"MPA\") code_rfmo <- get_region_id(region_name = \"IATTC\", region_source = \"RFMO\") get_raster(spatial_resolution = \"LOW\",            temporal_resolution = \"MONTHLY\",            start_date = \"2022-01-01\",            end_date = \"2023-01-01\",            region = code_rfmo$id[1],            region_source = \"RFMO\") #using a sf from disk /loading a test sf object data(test_shape) get_raster(spatial_resolution = \"LOW\",             temporal_resolution = \"YEARLY\",             start_date = \"2021-01-01\",             end_date = \"2021-10-01\",             region = test_shape,             region_source = \"USER_SHAPEFILE\",             key = gfw_auth(),             print_request = TRUE) } # }"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_region_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to pull region code using region name and viceversa — get_region_id","title":"Function to pull region code using region name and viceversa — get_region_id","text":"Function pull region code using region name viceversa","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_region_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to pull region code using region name and viceversa — get_region_id","text":"","code":"get_region_id(region_name = NULL, region_source = \"EEZ\", key = gfw_auth())"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_region_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to pull region code using region name and viceversa — get_region_id","text":"region_name Character numeric EEZ MPA RFMO name id. region_source Character, source region data, \"EEZ\", \"MPA\" \"RFMO\". key Character, API token. Defaults gfw_auth().","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_region_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to pull region code using region name and viceversa — get_region_id","text":"get_region_id(), corresponding code, region names iso code EEZ, MPA RFMO label","code":""},{"path":[]},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_region_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to pull region code using region name and viceversa — get_region_id","text":"","code":"if (FALSE) { # \\dontrun{ get_region_id(region_name = \"COL\", region_source = \"EEZ\") get_region_id(region_name = \"Colombia\", region_source = \"EEZ\") get_region_id(region_name = \"Nazca\", region_source = \"MPA\") get_region_id(region_name = \"IOTC\", region_source = \"RFMO\") get_region_id(region_name = 8456, region_source = \"EEZ\") # Handling empty strings (high-seas) get_region_id(region_name = \"\", region_source = \"EEZ\") get_region_id(region_name = NA, region_source = \"EEZ\") get_region_id(region_name = NA, region_source = \"MPA\") } # }"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"List of available regions in Global Fishing Watch platforms, EEZs, MPAs, and RFMOs — get_regions","title":"List of available regions in Global Fishing Watch platforms, EEZs, MPAs, and RFMOs — get_regions","text":"List available regions Global Fishing Watch platforms, EEZs, MPAs, RFMOs","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of available regions in Global Fishing Watch platforms, EEZs, MPAs, and RFMOs — get_regions","text":"","code":"get_regions(region_source = \"EEZ\", key = gfw_auth())"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of available regions in Global Fishing Watch platforms, EEZs, MPAs, and RFMOs — get_regions","text":"region_source string, source region data (\"EEZ\", \"MPA\", \"RFMO') key Character, API token. Defaults gfw_auth().","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of available regions in Global Fishing Watch platforms, EEZs, MPAs, and RFMOs — get_regions","text":"dataframe region ids names specified region type","code":""},{"path":[]},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_regions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of available regions in Global Fishing Watch platforms, EEZs, MPAs, and RFMOs — get_regions","text":"","code":"if (FALSE) { # \\dontrun{ get_regions(region_source = \"EEZ\") get_regions(region_source = \"RFMO\") get_regions(region_source = \"MPA\") } # }"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_vessel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Base function to get vessel information from API and convert response to tibble — get_vessel_info","title":"Base function to get vessel information from API and convert response to tibble — get_vessel_info","text":"Base function get vessel information API convert response tibble","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_vessel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base function to get vessel information from API and convert response to tibble — get_vessel_info","text":"","code":"get_vessel_info(   query = NULL,   where = NULL,   search_type = \"search\",   ids = NULL,   includes = c(\"AUTHORIZATIONS\", \"OWNERSHIP\", \"MATCH_CRITERIA\"),   match_fields = NULL,   registries_info_data = c(\"ALL\"),   key = gfw_auth(),   quiet = FALSE,   print_request = FALSE,   ... )"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_vessel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base function to get vessel information from API and convert response to tibble — get_vessel_info","text":"query search_type = \"search\", length-1 vector identity variable interest, MMSI, IMO, call sign ship name. search_type = \"search\", SQL expression find vessel interest. search_type Type vessel search perform. Can \"search\" (default) \"id\". (Note:\"advanced\" \"basic\" longer use gfwr 2.0.0.). ids search_type = \"id\", vector vesselId interest. includes Enhances response new information, defaults include . \"OWNERSHIP\" returns ownership information \"AUTHORIZATIONS\" lists public authorizations vessel \"MATCH_CRITERIA\" adds information reason vessel returned match_fields Optional. Allows filter matchFields levels. Possible values: \"SEVERAL_FIELDS\", \"NO_MATCH\", \"\". Incompatible . registries_info_data search_type == \"id\", gets registry objects, delta latest. \"NONE\" API return recent object \"DELTA\" API return objects vessel changed one identity properties \"\" registryInfo array return objects vessel database key Character, API token. Defaults gfw_auth(). quiet Boolean. Whether print number events returned request progress. Default FALSE. print_request Boolean. Whether print request, debugging purposes. contacting GFW team useful send string. ... parameters, see API documentation.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_vessel_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Base function to get vessel information from API and convert response to tibble — get_vessel_info","text":"search_type = \"search\" search takes basic identity features like MMSI, IMO, callsign, shipname inputs, using parameter \"query\". advanced SQL searches, use parameter \"\". can combine logic operators like , , =, >= , <, LIKE (fuzzy matching). id search allows user search using GFW vesselId.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/get_vessel_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base function to get vessel information from API and convert response to tibble — get_vessel_info","text":"","code":"if (FALSE) { # \\dontrun{ library(gfwr) # Simple searches, using includes get_vessel_info(query = 224224000, search_type = \"search\", key = gfw_auth()) # Advanced search with where instead of query: get_vessel_info(where = \"ssvid = '441618000' OR imo = '9047271'\", search_type = \"search\", key = gfw_auth())  # Vessel id search  get_vessel_info(search_type = \"id\",  ids = c(\"8c7304226-6c71-edbe-0b63-c246734b3c01\",  \"6583c51e3-3626-5638-866a-f47c3bc7ef7c\"), key = gfw_auth())  all <- get_vessel_info(search_type = \"id\",  ids = c(\"8c7304226-6c71-edbe-0b63-c246734b3c01\"),  registries_info_data = c(\"ALL\"), key = gfw_auth())  none <- get_vessel_info(search_type = \"id\",  ids = c(\"8c7304226-6c71-edbe-0b63-c246734b3c01\"),  registries_info_data = c(\"NONE\"), key = gfw_auth())  delta <- get_vessel_info(search_type = \"id\",  ids = c(\"8c7304226-6c71-edbe-0b63-c246734b3c01\"),  registries_info_data = c(\"DELTA\"),  key = gfw_auth())  } # }"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/gfw_api_request.html","id":null,"dir":"Reference","previous_headings":"","what":"General function for GFW API requests, including handling of pagination. — gfw_api_request","title":"General function for GFW API requests, including handling of pagination. — gfw_api_request","text":"General function GFW API requests, including handling pagination.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/gfw_api_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General function for GFW API requests, including handling of pagination. — gfw_api_request","text":"","code":"gfw_api_request(endpoint, key)"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/gfw_api_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General function for GFW API requests, including handling of pagination. — gfw_api_request","text":"endpoint endpoint make request key Authentication key","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/gfw_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Get user API token from .Renviron — gfw_auth","title":"Get user API token from .Renviron — gfw_auth","text":"Get user API token .Renviron","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/gfw_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get user API token from .Renviron — gfw_auth","text":"","code":"gfw_auth()"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/gfw_user_agent.html","id":null,"dir":"Reference","previous_headings":"","what":"Set user agent for gfwr API requests — gfw_user_agent","title":"Set user agent for gfwr API requests — gfw_user_agent","text":"Set user agent gfwr API requests","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/gfw_user_agent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set user agent for gfwr API requests — gfw_user_agent","text":"","code":"gfw_user_agent()"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/gfwr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"gfwr: Access data from Global Fishing Watch APIs — gfwr-package","title":"gfwr: Access data from Global Fishing Watch APIs — gfwr-package","text":"package connects several Global Fishing Watch APIs get vessel events information R-friendly format.","code":""},{"path":[]},{"path":"https://globalfishingwatch.github.io/gfwr/reference/gfwr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gfwr: Access data from Global Fishing Watch APIs — gfwr-package","text":"Maintainer: Andrea Sánchez-Tapia andrea.sanchez-tapia@globalfishingwatch.org (ORCID) Authors: Tyler Clavelle tyler@globalfishingwatch.org (ORCID) Rocío Joo rocio.joo@globalfishingwatch.org (ORCID) Nate Miller nate@globalfishingwatch.org","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/make_char.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic function to make length 1 lists into characters — make_char","title":"Basic function to make length 1 lists into characters — make_char","text":"Basic function make length 1 lists characters","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/make_char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic function to make length 1 lists into characters — make_char","text":"","code":"make_char(col)"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/make_datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to convert datetime responses — make_datetime","title":"Helper function to convert datetime responses — make_datetime","text":"Helper function convert datetime responses","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/make_datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to convert datetime responses — make_datetime","text":"","code":"make_datetime(x)"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/marine_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplified Marine Regions v12 dataset — marine_regions","title":"Simplified Marine Regions v12 dataset — marine_regions","text":"tibble ISO codes names derived Marine Regions v12, used get_regions() get_region_id() extract numeric EEZ codes (MRGID)","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/marine_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplified Marine Regions v12 dataset — marine_regions","text":"","code":"marine_regions"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/marine_regions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simplified Marine Regions v12 dataset — marine_regions","text":"tibble 285 rows 5 columns iso ISO Code derived different ISO code columns Maritime Boundaries Geodatabase v12 name Territory name derived different Name Geoname columns Maritime Boundaries Geodatabase v12 MRGID Original numeric id EEZs Marine Boundaries Geodatabase v12. numeric code used region argument using functions get_raster() get_event(), region_source = \"EEZ\". GEONAME Original GEONAME field Maritime Boundaries Geodatabase v12 POL_TYPE Original POLygon TYPE Maritime Boundaries Geodatabase v12. Possible value \"200NM\", \"Overlapping claim\" \"Joint regime\"","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/marine_regions.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simplified Marine Regions v12 dataset — marine_regions","text":"Marine Regions https://www.marineregions.org/. https://doi.org/10.14284/632","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/marine_regions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simplified Marine Regions v12 dataset — marine_regions","text":"main source data EEZ shapefiles information across Global Fishing Watch's data platforms Marine Regions v12. main variable interest dataset MRGID, unique identifier one polygons comprising Marine Regions. MRGID necessary retrieve apparent fishing effort data event types gfwr functions region_source = \"EEZ\" Functions get_region_id() get_regions() facilitate fetching region ids ISO codes region names. However, original Marine Region dataset includes several columns can refer ISO territory (ISO_TER1), entity sovereignty territory (ISO_SOV1) territories operate Joint regime areas, claim Overlapping claims areas (ISO_SOV1, ISO_SOV2, ISO_SOV3). table marine_regions unifies ISO markers single column without modifying original data, reproducible way. Likewise, marine_regions also derives name column different names GEONAME columns present original dataset. logic synthesis can found data-raw/marine_regions.R file.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/marine_regions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simplified Marine Regions v12 dataset — marine_regions","text":"Flanders Marine Institute (2023). Maritime Boundaries Geodatabase: Maritime Boundaries Exclusive Economic Zones (200NM), version 12. Available online https://www.marineregions.org/. https://doi.org/10.14284/632","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/parse_response_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to parse error message data and display appropriately to user — parse_response_error","title":"Helper function to parse error message data and display appropriately to user — parse_response_error","text":"Helper function parse error message data display appropriately user","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/parse_response_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to parse error message data and display appropriately to user — parse_response_error","text":"","code":"parse_response_error(resp)"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/parse_response_error.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function to parse error message data and display appropriately to user — parse_response_error","text":"Taken httr2 docs: https://httr2.r-lib.org/articles/wrapping-apis.html#sending-data","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/sf_to_geojson.html","id":null,"dir":"Reference","previous_headings":"","what":"Formats an sf shapefile to a formatted geojson — sf_to_geojson","title":"Formats an sf shapefile to a formatted geojson — sf_to_geojson","text":"Formats sf shapefile formatted geojson","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/sf_to_geojson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formats an sf shapefile to a formatted geojson — sf_to_geojson","text":"","code":"sf_to_geojson(sf_shape, endpoint = \"raster\")"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/sf_to_geojson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formats an sf shapefile to a formatted geojson — sf_to_geojson","text":"sf_shape sf shapefile transform endpoint GFW endpoint destination geojson (\"raster\" \"event\")","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/sf_to_geojson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formats an sf shapefile to a formatted geojson — sf_to_geojson","text":"correctly-formatted geojson used get_raster() get_event()","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/sf_to_geojson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formats an sf shapefile to a formatted geojson — sf_to_geojson","text":"","code":"library(gfwr) data(test_shape) substr(sf_to_geojson(test_shape), 1, 20) #> [1] \"{\\\"geojson\\\":{\\\"type\\\":\\\"\" substr(sf_to_geojson(test_shape, endpoint = \"event\"), 1, 20) #> [1] \"\\\"geometry\\\":{\\\"type\\\":\\\"\""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/test_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"A sample shapefile — test_shape","title":"A sample shapefile — test_shape","text":"sf shapefile show example user-defined GeoJSON get_event() get_raster()","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/test_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A sample shapefile — test_shape","text":"","code":"test_shape"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/test_shape.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A sample shapefile — test_shape","text":"shapefile single polygon.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/vector_to_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms a vector to a named vector for httr2 — vector_to_array","title":"Transforms a vector to a named vector for httr2 — vector_to_array","text":"Transforms vector named vector httr2","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/vector_to_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms a vector to a named vector for httr2 — vector_to_array","text":"","code":"vector_to_array(x, type = \"vessel\")"},{"path":"https://globalfishingwatch.github.io/gfwr/reference/vector_to_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms a vector to a named vector for httr2 — vector_to_array","text":"x vector transform type type data paste, \"events\", \"datasets\", \"vessel\" depending context","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/vector_to_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforms a vector to a named vector for httr2 — vector_to_array","text":"named vector format required API, names followed zero-indexed suffix (ex. datasets\\[0\\])","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/reference/vector_to_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforms a vector to a named vector for httr2 — vector_to_array","text":"","code":"vector_to_array(x = 1, type = \"vessel\") #> vessel[0]  #>         1  vector_to_array(x = \"a\", type = \"vessel\") #> vessel[0]  #>       \"a\"  vector_to_array(x = c(1, 2), type = \"dataset\") #> dataset[0] dataset[1]  #>          1          2  vector_to_array(x = c(1, 2, 3), type = \"dataset\") #> dataset[0] dataset[1] dataset[2]  #>          1          2          3  vector_to_array(x = \"fishing\", type = \"dataset\") #> dataset[0]  #>  \"fishing\"  vector_to_array(x = c(\"fishing\", \"port-visits\"), type = \"event\") #>      event[0]      event[1]  #>     \"fishing\" \"port-visits\""},{"path":"https://globalfishingwatch.github.io/gfwr/news/index.html","id":"gfwr-204","dir":"Changelog","previous_headings":"","what":"gfwr 2.0.4","title":"gfwr 2.0.4","text":"July 25 2025 breaking changes Adds new dataset, marine_regions, -package version modified Marine Regions v12 table retrieve IDs region_source = \"EEZ\". Fixes issue #208 marine_regions. pose breaking change user side. Improves documentation filter_by get_raster() (#209)","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/news/index.html","id":"gfwr-203","dir":"Changelog","previous_headings":"","what":"gfwr 2.0.3","title":"gfwr 2.0.3","text":"breaking changes","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/news/index.html","id":"bug-fixes-2-0-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"gfwr 2.0.3","text":"geartypes shiptypes unnested returned responses–causing error reported #193 MPA, EEZ, RFMO ids longer enforced numeric, causing errors character alphanumeric ids RFMOS MPAs get_region_id() can now process empty id strings (\"\") return NA tibbles instead returning error, allows process events happening high-seas (#201)","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/news/index.html","id":"documentation-improvements-2-0-3","dir":"Changelog","previous_headings":"","what":"Documentation improvements","title":"gfwr 2.0.3","text":"get_event() can receive string several vesselIds (twenty previously stated). However, requests long character length fail error HTTP 422: Unprocessable entity. means around 2,000 vesselIDs can sent per request. RFMO documentation improved clarify complete list RFMOs #194 readme subsections easier reference explicit calls gfw_auth() longer suggested.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/news/index.html","id":"gfwr-202","dir":"Changelog","previous_headings":"","what":"gfwr 2.0.2","title":"gfwr 2.0.2","text":"Minor updates documentation, parameter reordering improving descriptions. breaking changes.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/news/index.html","id":"gfwr-201","dir":"Changelog","previous_headings":"","what":"gfwr 2.0.1","title":"gfwr 2.0.1","text":"2024-11-28","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/news/index.html","id":"major-change---bug-fix-2-0-1","dir":"Changelog","previous_headings":"","what":"Major change - bug fix","title":"gfwr 2.0.1","text":"updated parsing output get_vessel_info(). advanced queries using , function returning subset vessels. issue now solved number results equal number vessels returned Vessel Viewer map. (solves #176)","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/news/index.html","id":"breaking-changes-2-0-1","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"gfwr 2.0.1","text":"fields response renamed across outputs (addressing issue #146): get_vessel_info(): $registryInfo renamed id registryId get_event(): renamed id eventId type eventType","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/news/index.html","id":"new-features-2-0-1","dir":"Changelog","previous_headings":"","what":"New features","title":"gfwr 2.0.1","text":"get_vessel_info(): added index column indicate vesselIds grouped together belong vessel. help associate information returned datasets guide user requesting events single vessel group vessels. get_event(): unnested column-list \"vessel\" give visibility vessels event corresponds .","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/news/index.html","id":"minor-changes-2-0-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"gfwr 2.0.1","text":"updated get_event() section README improve workflow send groups vesselIds corresponding one multiple vessels.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/news/index.html","id":"gfwr-200","dir":"Changelog","previous_headings":"","what":"gfwr 2.0.0","title":"gfwr 2.0.0","text":"gfwr updated work version 3 APIs. results various breaking changes parameter names output formats. aim list major modifications please also check API documentation migration guide anything new missing.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/news/index.html","id":"endpoints-2-0-0","dir":"Changelog","previous_headings":"","what":"Endpoints","title":"gfwr 2.0.0","text":"get_raster() communicates 4Wings API get fishing effort get_vessel_info() communicates Vessels API get_event() communicates Events API get_events_stats() get events statistics worldwide specific region get_last_report() check status last API request get_raster() Note: APIs implemented primarily designed frontend application rather data download. APIs : /v3/4wings/generate-png /v3/4wings/tile/:type/:z/:x/:y /v3/4wings/interaction/{z}/{x}/{y}/{cells} /v3/4wings/bins/:z","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/news/index.html","id":"major-changes-and-new-features-2-0-0","dir":"Changelog","previous_headings":"","what":"Major changes and new features","title":"gfwr 2.0.0","text":"Improved documentation -package, including two vignettes can accessed website https://globalfishingwatch.github.io/gfwr/ Functions new parameter print_request print API request useful requesting support. Please describe problem, send simplified script copy string request filling issue. region argument get_raster() andget_event() now accepts sf polygons rather GeoJSON strings Incorporated non-fishing vessel types datasets. simple search return vessels vessel types (“CARRIER”, “SUPPORT”, “PASSENGER”, “OTHER_NON_FISHING”, “SEISMIC_VESSEL”, “BUNKER_OR_TANKER”, “CARGO” addition “FISHING”) search_type = search replaces search type = \"basic\" \"advanced\". Instead, use parameter query basic search parameter advanced search (.e. using SQL expressions) Registry information now available: Parameter includes allows search include ownership information, public authorizations public registries, criteria matching AIS data Vessel types supported now include non-fishing vessels: “FISHING”, “CARRIER”, “SUPPORT”, “PASSENGER”, “OTHER_NON_FISHING”, “SEISMIC_VESSEL”, “BUNKER_OR_TANKER”, “CARGO” Event types now include fishing, gaps AIS transmission, encounters, loitering events port visits. Fishing events specific fishing vessels, loitering events specific carrier vessels. Port visits encounters available vessel types. Parameter confidence (1 4) allows filtering high confidence port visits. parameters must now specified using UPPER CASE (ex. event_type = \"FISHING\" instead event_type = \"fishing\") user-defined shapefile can now sent requests, sf object parameters must now specified using UPPER CASE (ex. spatial_resolution = \"LOW\" instead spatial_resolution = \"low\") region argument now accepts sf polygons rather GeoJSON string Parameters start_date end_date replace date_range consistency functions","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/news/index.html","id":"additional-changes-2-0-0","dir":"Changelog","previous_headings":"Major changes and new features","what":"Additional changes","title":"gfwr 2.0.0","text":"Option USER_JSON renamed USER_SHAPEFILE clarity (addresses #161)","code":""},{"path":[]},{"path":"https://globalfishingwatch.github.io/gfwr/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"New features:","title":"gfwr 1.1.0","text":"addition JSON region, can now pass EEZ MPA id get_raster() function query specific region get_region_id() now takes id returns label. allows get label id values returned certain endpoints (e.g. get_event()) Considerable speed increases get_event() function","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes:","title":"gfwr 1.1.0","text":"get_event() prints \"request returned zero results\" returns NULL API response contains results instead causing error.","code":""},{"path":[]},{"path":"https://globalfishingwatch.github.io/gfwr/news/index.html","id":"updated-documentation-1-1-0","dir":"Changelog","previous_headings":"Other news:","what":"Updated documentation","title":"gfwr 1.1.0","text":"get_raster(): requires group_by appropriate parameter name gearType Added NEWS.md file track changes package.","code":""},{"path":"https://globalfishingwatch.github.io/gfwr/news/index.html","id":"gfwr-100","dir":"Changelog","previous_headings":"","what":"gfwr 1.0.0","title":"gfwr 1.0.0","text":"Initial release gfwr package. includes functions access three GFW APIs - Vessels API, Events API, Map Visualization (4Wings) API.","code":""}]
