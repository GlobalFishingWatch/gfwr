[{"path":[]},{"path":"/CodeOfConduct.html","id":"our-pledge","dir":"","previous_headings":"Code of conduct","what":"Our pledge","title":"NA","text":"members, contributors, leaders pledge make participation gfwr contributing users community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CodeOfConduct.html","id":"our-standards","dir":"","previous_headings":"Code of conduct","what":"Our standards","title":"NA","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people. respectful differing opinions, viewpoints, experiences. Giving gracefully accepting constructive feedback. Accepting responsibility apologizing affected mistakes, learning experience. Focusing best just us individuals, overall community. Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind. Trolling, insulting derogatory comments, personal political attacks. Public private harassment. Publishing others’ private information, physical email address, without explicit permission. conduct reasonably considered inappropriate professional setting.","code":""},{"path":"/CodeOfConduct.html","id":"enforcement-responsibilities","dir":"","previous_headings":"Code of conduct","what":"Enforcement responsibilities","title":"NA","text":"gfwr maintainers responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CodeOfConduct.html","id":"scope","dir":"","previous_headings":"Code of conduct","what":"Scope","title":"NA","text":"Code Conduct applies within gfwr community spaces, also applies individual officially representing community public spaces. Examples representing gfwr community include using official gfwr e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CodeOfConduct.html","id":"enforcement","dir":"","previous_headings":"Code of conduct","what":"Enforcement","title":"NA","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported gfwr package maintainers either publicly opening issue gfwr repository privately e-mail maintainer (emails DESCRIPTION file package), e.g., needed reporting unacceptable behavior another maintainer). complaints reviewed investigated promptly fairly. maintainers obligated respect privacy security reporter incident.","code":""},{"path":"/CodeOfConduct.html","id":"enforcement-guidelines","dir":"","previous_headings":"Code of conduct","what":"Enforcement guidelines","title":"NA","text":"maintainers follow Community Impact Guidelines determining consequences action deem violation Code Conduct: 1. Correction Community impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning maintainers, providing clarity around nature violation explanation behavior inappropriate. public apology may requested. 2. Warning Community impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban. 3. Temporary ban Community impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban. 4. Permanent ban Community impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within gfwr community.","code":""},{"path":"/CodeOfConduct.html","id":"attribution","dir":"","previous_headings":"Code of conduct","what":"Attribution","title":"NA","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.","code":""},{"path":"/Contributing.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"(contributing guide adaptation Carpentries, tidyverse, unifr contributing guides.) gfwr open source project, welcome contributions multiple kinds: bug reports, fixes bugs, typos, improvements documentation, new functions.","code":""},{"path":"/Contributing.html","id":"contributor-agreement","dir":"","previous_headings":"","what":"Contributor Agreement","title":"Contributing","text":"contributing, agree may redistribute work license. exchange, address issues /assess change proposal promptly can, help become member community. Everyone involved gfwr agrees abide code conduct.","code":""},{"path":"/Contributing.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to Contribute","title":"Contributing","text":"easiest way get started file issue tell us spelling mistake, awkward wording, bug. GitHub account, can send us comments email (see emails DESCRIPTION file). However, able respond quickly use one methods described . GitHub account, willing create one, know use Git, can report problems suggest improvements creating issue. allows us assign item someone respond threaded discussion. comfortable Git, like add change material, can submit pull request (PR). preferred options 3, 2, 1, order.","code":""},{"path":[]},{"path":"/Contributing.html","id":"fixing-typos","dir":"","previous_headings":"What to Contribute","what":"Fixing typos","title":"Contributing","text":"can fix typos, spelling mistakes, grammatical errors documentation directly PR. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line. PR complicated, can use options 1 2 previous section","code":""},{"path":"/Contributing.html","id":"improvements-to-documentation","dir":"","previous_headings":"What to Contribute","what":"Improvements to documentation","title":"Contributing","text":"may think functions clear enough suggestions improve documentation package. ’ll also need edit roxygen2 comments .R file, case go PR.","code":""},{"path":"/Contributing.html","id":"bug-reports","dir":"","previous_headings":"What to Contribute","what":"Bug reports","title":"Contributing","text":"’ve found bug, first create minimal reprex. Spend time trying make minimal possible: time spend , easier gfwr team fix . file issue. can’t reproduce bug, difficult us fix .","code":""},{"path":"/Contributing.html","id":"fixes-to-bugs","dir":"","previous_headings":"What to Contribute","what":"Fixes to bugs","title":"Contributing","text":"see bug report issue know fix , please share solution issue. can PR fix issue, please let us know issue.","code":""},{"path":"/Contributing.html","id":"new-functions","dir":"","previous_headings":"What to Contribute","what":"New functions","title":"Contributing","text":"gfwr package developed help R community access GFW data research applications. ideas new functions consistent aim, please let us know email, issue, proposal PR. like write function prefer chat first us, can open issue start conversation PR.","code":""},{"path":"/Contributing.html","id":"what-not-to-contribute","dir":"","previous_headings":"","what":"What Not to Contribute","title":"Contributing","text":"Remember package wrapper API, intend add functions plot analyze data. scope package. interested collaborating us generate package, please get touch. Otherwise, welcome create package functions scope one . happy see people making contributions community based work.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tyler Clavelle. Author, maintainer. Rocío Joo. Author. Nate Miller. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Clavelle T, Joo R, Miller N (2023). gfwr: Interactions GFW APIs providing data tibbles. R package version 1.1.1, https://github.com/GlobalFishingWatch/gfwr.","code":"@Manual{,   title = {gfwr: Interactions with GFW APIs providing data tibbles},   author = {Tyler Clavelle and Rocío Joo and Nate Miller},   year = {2023},   note = {R package version 1.1.1},   url = {https://github.com/GlobalFishingWatch/gfwr}, }"},{"path":"/index.html","id":null,"dir":"","previous_headings":"","what":"An R package for accessing data from Global Fishing Watch APIs","title":"An R package for accessing data from Global Fishing Watch APIs","text":"gfwr R package simple wrapper Global Fishing Watch (GFW) APIs. provides convenient functions freely pull GFW data directly R tidy formats. package currently works following APIs: Vessels API: vessel search identity based AIS self reported data Events API: encounters, loitering, port visits fishing events based AIS data Map Visualization (4Wings API): apparent fishing effort based AIS data Note: See Terms Use page GFW APIs information API licenses rate limits.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R package for accessing data from Global Fishing Watch APIs","text":"can install development version gfwr like : everything installed, can load use gfwr scripts library(gfwr)","code":"devtools::install_github(\"GlobalFishingWatch/gfwr\") library(gfwr)"},{"path":"/index.html","id":"authorization","dir":"","previous_headings":"","what":"Authorization","title":"An R package for accessing data from Global Fishing Watch APIs","text":"use gfwr requires GFW API token, users can request GFW API Portal. Save token .Renviron file (using usethis::edit_r_environ()) adding variable named GFW_TOKEN file (GFW_TOKEN = \"PASTE_YOUR_TOKEN_HERE\"). Save .Renviron file restart R session make edit effective. use gfw_auth helper function save information object R workspace every time need extract token pass subsequent gfwr functions. can : Note:gfwr functions set use key = gfw_auth() default.","code":"key <- gfw_auth() key <- Sys.getenv(\"GFW_TOKEN\")"},{"path":"/index.html","id":"vessels-api","dir":"","previous_headings":"","what":"Vessels API","title":"An R package for accessing data from Global Fishing Watch APIs","text":"get_vessel_info function allows get vessel identity details GFW Vessels API. three search types: basic, advanced, id. basic search takes features like MMSI, IMO, callsign, shipname inputs identifies vessels specified dataset match advanced search allows use fuzzy matching terms LIKE. id search allows user search using GFW vessel id allows user specify vessel id (generated GFW) Note:vessel id internal ID generated GFW connect data accross APIs involves combination vessel tracking data information user can also specify identity databases use: carrier_vessel, support_vessel, fishing_vessel, . latter, databases used search. generally recommended option set default.","code":""},{"path":"/index.html","id":"examples","dir":"","previous_headings":"Vessels API","what":"Examples","title":"An R package for accessing data from Global Fishing Watch APIs","text":"get information vessel MMSI = 224224000 using datasets: combine different fields fuzzy matching search carrier vessel dataset: specify vessel id: specify one vessel id: Note:  spaces newlines permitted vessel ids","code":"get_vessel_info(query = 224224000,                  search_type = \"basic\",                  dataset = \"all\",                  key = key) #> # A tibble: 1 × 17 #>    name callsign first…¹ flag  geart…² id    imo   lastT…³ mmsi  msgCo…⁴ posCo…⁵ #>   <int> <chr>    <chr>   <chr> <lgl>   <chr> <chr> <chr>   <chr>   <int>   <int> #> 1     1 EBSJ     2015-1… ESP   NA      3c99… 8733… 2019-1… 2242… 1887249   73677 #> # … with 6 more variables: shipname <chr>, source <chr>, vesselType <chr>, #> #   years <list>, dataset <chr>, score <dbl>, and abbreviated variable names #> #   ¹​firstTransmissionDate, ²​geartype, ³​lastTransmissionDate, ⁴​msgCount, #> #   ⁵​posCount get_vessel_info(query = \"shipname LIKE '%GABU REEFE%' OR imo = '8300949'\",                  search_type = \"advanced\", dataset = \"carrier_vessel\", key = key) get_vessel_info(query = \"8c7304226-6c71-edbe-0b63-c246734b3c01\",                  search_type = \"id\", dataset = \"carrier_vessel\", key = key) get_vessel_info(query =                    \"8c7304226-6c71-edbe-0b63-c246734b3c01,6583c51e3-3626-5638-866a-f47c3bc7ef7c,71e7da672-2451-17da-b239-857831602eca\",                  search_type = 'id', key = key)"},{"path":"/index.html","id":"events-api","dir":"","previous_headings":"","what":"Events API","title":"An R package for accessing data from Global Fishing Watch APIs","text":"get_event function allows get data specific vessel activities GFW Events API. Event types include: apparent fishing events, potential transshipment events (two-vessel encounters loitering refrigerated carrier vessels), port visits. Find information caveat documentation.","code":""},{"path":"/index.html","id":"examples-1","dir":"","previous_headings":"Events API","what":"Examples","title":"An R package for accessing data from Global Fishing Watch APIs","text":"Let’s say don’t know vessel id MMSI (identity information). can use get_vessel_info function first extract vessel id use get_event function: get list port visits vessel: can also use one vessel id: get encounters vessels given date range: another example, let’s combine Vessels Events APIs get fishing events list 10 USA-flagged trawlers: Now get list fishing events trawlers January, 2020: events available, get_event() function returns nothing.","code":"vessel_id <- get_vessel_info(query = 224224000, search_type = \"basic\", key = key)$id get_event(event_type='port_visit',           vessel = vessel_id,           confidences = '4',           key = key           ) #> [1] \"Downloading 35 events from GFW\" #> # A tibble: 35 × 11 #>    id    type  start               end                   lat    lon regions      #>    <chr> <chr> <dttm>              <dttm>              <dbl>  <dbl> <list>       #>  1 b725… port… 2015-11-04 05:22:13 2015-11-07 10:46:28  5.23  -4.00 <named list> #>  2 f03f… port… 2015-12-06 11:48:38 2015-12-10 16:19:37  5.24  -4.08 <named list> #>  3 cbd7… port… 2016-01-09 06:47:57 2016-01-13 14:30:33  5.24  -4.00 <named list> #>  4 6265… port… 2016-02-25 14:26:38 2016-03-01 13:21:21  5.25  -4.00 <named list> #>  5 4a7f… port… 2016-03-03 05:47:02 2016-03-03 11:46:33  5.20  -4.02 <named list> #>  6 617d… port… 2016-03-31 04:43:41 2016-04-02 09:07:10  5.23  -4.00 <named list> #>  7 3c26… port… 2016-04-20 06:50:58 2016-04-20 19:47:10 14.7  -17.4  <named list> #>  8 104e… port… 2016-04-24 07:14:33 2016-04-24 11:54:59 14.7  -17.4  <named list> #>  9 8f19… port… 2016-05-18 19:31:04 2016-05-22 14:20:05  5.20  -4.01 <named list> #> 10 bf64… port… 2016-06-26 15:08:16 2016-06-30 10:39:03  5.20  -4.07 <named list> #> # … with 25 more rows, and 4 more variables: boundingBox <list>, #> #   distances <list>, vessel <list>, event_info <list> get_event(event_type='port_visit',           vessel = '8c7304226-6c71-edbe-0b63-c246734b3c01,6583c51e3-3626-5638-866a-f47c3bc7ef7c',           confidences = 4,           start_date = \"2020-01-01\",           end_date = \"2020-02-01\",           key = key           ) get_event(event_type='encounter',           start_date = \"2020-01-01\",           end_date = \"2020-02-01\",           key = key           ) # Download the list of USA trawlers usa_trawlers <- get_vessel_info(   query = \"flag = 'USA' AND geartype = 'trawlers'\",    search_type = \"advanced\",    dataset = \"fishing_vessel\",   key = key   )  # Collapse vessel ids into a commas separated list to pass to Events API usa_trawler_ids <- paste0(usa_trawlers$id[1:10], collapse = ',') get_event(event_type='fishing',           vessel = usa_trawler_ids,           start_date = \"2020-01-01\",           end_date = \"2020-02-01\",           key = key           ) #> [1] \"Downloading 16 events from GFW\" #> # A tibble: 16 × 11 #>    id    type  start               end                   lat    lon regions      #>    <chr> <chr> <dttm>              <dttm>              <dbl>  <dbl> <list>       #>  1 f85e… fish… 2020-01-06 12:35:55 2020-01-06 15:05:39  41.1  -66.4 <named list> #>  2 ccbe… fish… 2020-01-08 20:44:15 2020-01-09 09:16:14  34.6  -76.6 <named list> #>  3 d20b… fish… 2020-01-09 10:10:14 2020-01-09 13:23:45  34.6  -76.6 <named list> #>  4 cda2… fish… 2020-01-09 17:17:15 2020-01-09 22:47:20  34.6  -76.6 <named list> #>  5 2f98… fish… 2020-01-14 14:52:08 2020-01-14 15:45:00  54.2 -165.  <named list> #>  6 642a… fish… 2020-01-20 20:27:13 2020-01-20 23:48:13  34.6  -76.6 <named list> #>  7 4fdb… fish… 2020-01-21 12:42:01 2020-01-21 13:18:00  34.7  -76.8 <named list> #>  8 5101… fish… 2020-01-21 16:09:45 2020-01-22 07:50:52  34.6  -76.6 <named list> #>  9 0404… fish… 2020-01-22 09:19:52 2020-01-22 10:14:21  34.6  -76.6 <named list> #> 10 aacb… fish… 2020-01-23 10:55:05 2020-01-23 13:34:49  33.8  -78.0 <named list> #> 11 4b83… fish… 2020-01-30 19:41:58 2020-01-30 23:08:30  35.1  -75.9 <named list> #> 12 3f33… fish… 2020-01-31 01:09:15 2020-01-31 02:56:23  54.2 -165.  <named list> #> 13 d35f… fish… 2020-01-31 03:46:20 2020-01-31 05:37:04  54.2 -165.  <named list> #> 14 113b… fish… 2020-01-31 16:40:38 2020-01-31 18:04:28  54.2 -165.  <named list> #> 15 0ef5… fish… 2020-01-31 19:14:29 2020-01-31 20:28:14  54.2 -165.  <named list> #> 16 5812… fish… 2020-01-31 21:14:15 2020-01-31 21:56:05  54.2 -165.  <named list> #> # … with 4 more variables: boundingBox <list>, distances <list>, vessel <list>, #> #   event_info <list> get_event(event_type='fishing',           vessel = usa_trawler_ids,           start_date = \"2020-01-01\",           end_date = \"2020-01-01\",           key = key           ) #> [1] \"Your request returned zero results\" #> NULL"},{"path":"/index.html","id":"map-visualization-api","dir":"","previous_headings":"","what":"Map Visualization API","title":"An R package for accessing data from Global Fishing Watch APIs","text":"get_raster function gets raster 4Wings API converts response data frame. order use , specify: spatial resolution, can low (0.1 degree) high (0.01 degree) temporal resolution, can daily, monthly, yearly. variable group : vessel_id, flag, gearType, flagAndGearType date range note: must one (1) year less geojson region region code (EEZ code) filter raster source specified region (currently, eez, mpa, user_json)","code":""},{"path":"/index.html","id":"examples-2","dir":"","previous_headings":"Map Visualization API","what":"Examples","title":"An R package for accessing data from Global Fishing Watch APIs","text":"’s example enter geojson data manually: want raster data particular EEZ, can use get_region_id function get EEZ id, enter code region argument get_raster instead geojson data (ensuring specify region_source 'eez': search just one word name EEZ decide one want: similar approach can used search specific Marine Protected Area, case Phoenix Island Protected Area (PIPA) also possible filter rasters one five regional fisheries management organizations (RFMO) manage tuna tuna-like species. include \"ICCAT\", \"IATTC\",\"IOTC\", \"CCSBT\" \"WCPFC\". get_region_id function also works reverse. region id passed numeric function region_name, corresponding region label iso3 can returned. especially useful events returned regions.","code":"region_json = '{\"geojson\":{\"type\":\"Polygon\",\"coordinates\":[[[-76.11328125,-26.273714024406416],[-76.201171875,-26.980828590472093],[-76.376953125,-27.527758206861883],[-76.81640625,-28.30438068296276],[-77.255859375,-28.767659105691244],[-77.87109375,-29.152161283318918],[-78.486328125,-29.45873118535532],[-79.189453125,-29.61167011519739],[-79.892578125,-29.6880527498568],[-80.595703125,-29.61167011519739],[-81.5625,-29.382175075145277],[-82.177734375,-29.07537517955835],[-82.705078125,-28.6905876542507],[-83.232421875,-28.071980301779845],[-83.49609375,-27.683528083787756],[-83.759765625,-26.980828590472093],[-83.84765625,-26.35249785815401],[-83.759765625,-25.64152637306576],[-83.583984375,-25.16517336866393],[-83.232421875,-24.447149589730827],[-82.705078125,-23.966175871265037],[-82.177734375,-23.483400654325635],[-81.5625,-23.241346102386117],[-80.859375,-22.998851594142906],[-80.15625,-22.917922936146027],[-79.453125,-22.998851594142906],[-78.662109375,-23.1605633090483],[-78.134765625,-23.40276490540795],[-77.431640625,-23.885837699861995],[-76.9921875,-24.28702686537642],[-76.552734375,-24.846565348219727],[-76.2890625,-25.48295117535531],[-76.11328125,-26.273714024406416]]]}}'  get_raster(spatial_resolution = 'low',            temporal_resolution = 'yearly',            group_by = 'flag',            date_range = '2021-01-01,2021-12-31',            region = region_json,            region_source = 'user_json',            key = key) # use EEZ function to get EEZ code of Cote d'Ivoire code_eez <- get_region_id(region_name = 'CIV', region_source = 'eez', key = key)  get_raster(spatial_resolution = 'low',            temporal_resolution = 'yearly',            group_by = 'flag',            date_range = '2021-01-01,2021-10-01',            region = code_eez$id,            region_source = 'eez',            key = key) (get_region_id(region_name = 'French', region_source = 'eez', key = key)) #> # A tibble: 3 × 3 #>      id iso3  label                                     #>   <dbl> <chr> <chr>                                     #> 1  5677 FRA   French Exclusive Economic Zone            #> 2  8462 FRA   French Guiana Exclusive Economic Zone     #> 3  8440 FRA   French Polynesian Exclusive Economic Zone  # Let's say we're interested in the French Exclusive Economic Zone, 5677 get_raster(spatial_resolution = 'low',            temporal_resolution = 'yearly',            group_by = 'flag',            date_range = '2021-01-01,2021-10-01',            region = 5677,            region_source = 'eez',            key = key) #> Rows: 5421 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): flag #> dbl (4): Lat, Lon, Time Range, Apparent Fishing hours #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 5,421 × 5 #>      Lat   Lon `Time Range` flag  `Apparent Fishing hours` #>    <dbl> <dbl>        <dbl> <chr>                    <dbl> #>  1  50    -0.5         2021 BEL                      111.  #>  2  49.9  -0.4         2021 FRA                      537.  #>  3  47.8  -6.4         2021 FRA                      156.  #>  4  48.7  -5.6         2021 FRA                      301.  #>  5  48.3  -5.4         2021 FRA                      436.  #>  6  47.4  -4.2         2021 FRA                      555.  #>  7  45.9  -1.4         2021 FRA                      704.  #>  8  50    -0.6         2021 NLD                       40.4 #>  9  50.2   0           2021 GBR                      433.  #> 10  46.6  -2.8         2021 FRA                      272.  #> # … with 5,411 more rows # use region id function to get MPA code of Phoenix Island Protected Area code_mpa <- get_region_id(region_name = 'Phoenix', region_source = 'mpa', key = key)  get_raster(spatial_resolution = 'low',            temporal_resolution = 'yearly',            group_by = 'flag',            date_range = '2015-01-01,2015-06-01',            region = code_mpa$id[1],            region_source = 'mpa',            key = key) get_raster(spatial_resolution = 'low',            temporal_resolution = 'daily',            group_by = 'flag',            date_range = '2021-01-01,2021-01-15',            region = 'ICCAT',            region_source = 'trfmo',            key = key) # using same example as above get_event(event_type = 'fishing',           vessel = usa_trawler_ids,           start_date = \"2020-01-01\",           end_date = \"2020-02-01\",           include_regions = TRUE,           key = key           ) %>%   # extract EEZ id code   dplyr::mutate(eez = as.character(purrr::map(purrr::map(regions, pluck, 'eez'),                                                paste0, collapse = ','))) %>%   dplyr::select(id, type, start, end, lat, lon, eez) %>%   dplyr::rowwise() %>%   dplyr::mutate(eez_name = get_region_id(region_name = as.numeric(eez),                                          region_source = 'eez',                                          key = key)$label) #> [1] \"Downloading 16 events from GFW\" #> # A tibble: 16 × 8 #> # Rowwise:  #>    id           type  start               end                   lat    lon eez   #>    <chr>        <chr> <dttm>              <dttm>              <dbl>  <dbl> <chr> #>  1 f85ee7c4580… fish… 2020-01-06 12:35:55 2020-01-06 15:05:39  41.1  -66.4 8456  #>  2 ccbeb333747… fish… 2020-01-08 20:44:15 2020-01-09 09:16:14  34.6  -76.6 8456  #>  3 d20bb5e341f… fish… 2020-01-09 10:10:14 2020-01-09 13:23:45  34.6  -76.6 8456  #>  4 cda29eab7cb… fish… 2020-01-09 17:17:15 2020-01-09 22:47:20  34.6  -76.6 8456  #>  5 2f9864dddbc… fish… 2020-01-14 14:52:08 2020-01-14 15:45:00  54.2 -165.  8463  #>  6 642ab87eb37… fish… 2020-01-20 20:27:13 2020-01-20 23:48:13  34.6  -76.6 8456  #>  7 4fdb707c504… fish… 2020-01-21 12:42:01 2020-01-21 13:18:00  34.7  -76.8 8456  #>  8 510194551b5… fish… 2020-01-21 16:09:45 2020-01-22 07:50:52  34.6  -76.6 8456  #>  9 0404166ac0b… fish… 2020-01-22 09:19:52 2020-01-22 10:14:21  34.6  -76.6 8456  #> 10 aacb2c24ac0… fish… 2020-01-23 10:55:05 2020-01-23 13:34:49  33.8  -78.0 8456  #> 11 4b83e209e72… fish… 2020-01-30 19:41:58 2020-01-30 23:08:30  35.1  -75.9 8456  #> 12 3f339c72f5b… fish… 2020-01-31 01:09:15 2020-01-31 02:56:23  54.2 -165.  8463  #> 13 d35f8d0f773… fish… 2020-01-31 03:46:20 2020-01-31 05:37:04  54.2 -165.  8463  #> 14 113b42339a5… fish… 2020-01-31 16:40:38 2020-01-31 18:04:28  54.2 -165.  8463  #> 15 0ef57dde9c9… fish… 2020-01-31 19:14:29 2020-01-31 20:28:14  54.2 -165.  8463  #> 16 5812e018011… fish… 2020-01-31 21:14:15 2020-01-31 21:56:05  54.2 -165.  8463  #> # … with 1 more variable: eez_name <chr>"},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"An R package for accessing data from Global Fishing Watch APIs","text":"welcome contributions improve package! Please read Contribution Guide reach !","code":""},{"path":"/reference/get_endpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to get API dataset name for given event type — get_endpoint","title":"Function to get API dataset name for given event type — get_endpoint","text":"Function get API dataset name given event type","code":""},{"path":"/reference/get_endpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to get API dataset name for given event type — get_endpoint","text":"","code":"get_endpoint(dataset_type, ...)"},{"path":"/reference/get_endpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to get API dataset name for given event type — get_endpoint","text":"dataset_type Type dataset get API dataset name . can \"port_visit\", \"fishing\", \"encounter\", \"loitering\", \"eez\" \"mpa\"\" ... arguments depend dataset type.","code":""},{"path":"/reference/get_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Base function to get event from API and convert response to data frame — get_event","title":"Base function to get event from API and convert response to data frame — get_event","text":"Base function get event API convert response data frame","code":""},{"path":"/reference/get_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base function to get event from API and convert response to data frame — get_event","text":"","code":"get_event(   event_type = \"port_visit\",   vessel = NULL,   include_regions = NULL,   start_date = NULL,   end_date = NULL,   confidences = NULL,   key = gfw_auth(),   quiet = FALSE )"},{"path":"/reference/get_event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base function to get event from API and convert response to data frame — get_event","text":"event_type Type event get data . One \"port_visit\", \"encounter\", \"loitering, \"fishing\" vessel VesselID. get ? include_regions Whether include regions? Ask engineering can always false start_date Start date range search events end_date End date range search events confidences Confidence levels (1-4) events (port visits ). key Authorization token. Can obtained gfw_auth function quiet Boolean. Whether print number events returned request.","code":""},{"path":"/reference/get_event.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Base function to get event from API and convert response to data frame — get_event","text":"currently four available event types events provide three vessel types - fishing, carrier, support vessels. Fishing events (event_type = 'fishing') specific fishing vessels loitering events (event_type = 'loitering') specific carrier vessels. Port visits (event_type = 'port_visit') encounters (event_type = 'encounter') available vessel types. details various event types, see GFW API documentation. Encounter events involve multiple vessels one row returned vessel involved encounter. example, encounter carrier fishing vessel (carrier-fishing) one row fishing vessel one carrier vessel. id field encounter events two components separated .. first component unique id encounter event vessels involved encounter. second component integer used distinguish different vessels encounter.","code":""},{"path":"/reference/get_identity_endpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to get API endpoint name for identity search — get_identity_endpoint","title":"Function to get API endpoint name for identity search — get_identity_endpoint","text":"Function get API endpoint name identity search","code":""},{"path":"/reference/get_identity_endpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to get API endpoint name for identity search — get_identity_endpoint","text":"","code":"get_identity_endpoint(dataset_type, search_type, ...)"},{"path":"/reference/get_identity_endpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to get API endpoint name for identity search — get_identity_endpoint","text":"dataset_type Type identity dataset get API dataset name . can \"support_vessel\", \"carrier_vessel\" \"fishing_vessel\" search_type Type vessel search perform. Can \"basic\", \"advanced\", \"id\" ... arguments depend dataset type.","code":""},{"path":"/reference/get_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Base function to get raster from API and convert response to data frame — get_raster","title":"Base function to get raster from API and convert response to data frame — get_raster","text":"Base function get raster API convert response data frame","code":""},{"path":"/reference/get_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base function to get raster from API and convert response to data frame — get_raster","text":"","code":"get_raster(   spatial_resolution = NULL,   temporal_resolution = NULL,   group_by = NULL,   date_range = NULL,   region = NULL,   region_source = NULL,   key = gfw_auth() )"},{"path":"/reference/get_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base function to get raster from API and convert response to data frame — get_raster","text":"spatial_resolution raster spatial resolution. Can \"low\" = 0.1 degree \"high\" = 0.01 degree temporal_resolution raster temporal resolution. Can 'daily','monthly','yearly'. group_by parameter group . Can 'vessel_id', 'flag', 'gearType', 'flagAndGearType' date_range Start end date range raster (must one year less) region geojson GFW region code, shape filter raster region_source source region ('eez','mpa', 'trfmo' 'user_json') key Authorization token. Can obtained gfw_auth function","code":""},{"path":"/reference/get_raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Base function to get raster from API and convert response to data frame — get_raster","text":"See examples https://github.com/GlobalFishingWatch/gfwr","code":""},{"path":"/reference/get_region_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to pull numeric EEZ code using EEZ name — get_region_id","title":"Function to pull numeric EEZ code using EEZ name — get_region_id","text":"Function pull numeric EEZ code using EEZ name","code":""},{"path":"/reference/get_region_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to pull numeric EEZ code using EEZ name — get_region_id","text":"","code":"get_region_id(region_name, region_source = \"eez\", key)"},{"path":"/reference/get_region_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to pull numeric EEZ code using EEZ name — get_region_id","text":"region_name string numeric, EEZ/MPA name EEZ/MPA id region_source string, source region data ('eez' 'mpa') key string, API token","code":""},{"path":"/reference/get_region_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to pull numeric EEZ code using EEZ name — get_region_id","text":"dataframe, eez code EEZ name matching EEZs","code":""},{"path":"/reference/get_vessel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Base function to get vessel information from API and convert response to data frame — get_vessel_info","title":"Base function to get vessel information from API and convert response to data frame — get_vessel_info","text":"Base function get vessel information API convert response data frame","code":""},{"path":"/reference/get_vessel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base function to get vessel information from API and convert response to data frame — get_vessel_info","text":"","code":"get_vessel_info(   query = NULL,   search_type = NULL,   dataset = \"all\",   key = gfw_auth() )"},{"path":"/reference/get_vessel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base function to get vessel information from API and convert response to data frame — get_vessel_info","text":"query search terms identify vessel search_type type search, may 'basic','advanced', 'id' dataset identity datasets search , default = '' key Authorization token. Can obtained gfw_auth function","code":""},{"path":"/reference/get_vessel_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Base function to get vessel information from API and convert response to data frame — get_vessel_info","text":"three search types. basic search takes features like MMSI, IMO, callsign, shipname inputs identifies vessels specified dataset match. advanced search allows use fuzzy matching terms LIKE. id search allows user search using GFW vessel id. three identity databases available, \"carrier_vessel\", \"support_vessel\", \"fishing_vessel\". user can also specify \"\" search databases . generally recommended.","code":""},{"path":"/reference/gfw_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Get user API token from .Renviron — gfw_auth","title":"Get user API token from .Renviron — gfw_auth","text":"Get user API token .Renviron","code":""},{"path":"/reference/gfw_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get user API token from .Renviron — gfw_auth","text":"","code":"gfw_auth()"},{"path":"/reference/gfwr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"gfwr: Interactions with GFW APIs providing data tibbles — gfwr-package","title":"gfwr: Interactions with GFW APIs providing data tibbles — gfwr-package","text":"package connects several Global Fishing Watch APIs get vessel events information R-friendly format.","code":""},{"path":[]},{"path":"/reference/gfwr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gfwr: Interactions with GFW APIs providing data tibbles — gfwr-package","text":"Maintainer: Tyler Clavelle tyler@globalfishingwatch.org (ORCID) Authors: Rocío Joo rocio.joo@globalfishingwatch.org (ORCID) Nate Miller nate@globalfishingwatch.org (ORCID)","code":""},{"path":"/reference/gist_error_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to parse error message data\nand display appropriately to user\nTaken from httr2 docs: https://httr2.r-lib.org/articles/wrapping-apis.html#sending-data — gist_error_body","title":"Helper function to parse error message data\nand display appropriately to user\nTaken from httr2 docs: https://httr2.r-lib.org/articles/wrapping-apis.html#sending-data — gist_error_body","text":"Helper function parse error message data display appropriately user Taken httr2 docs: https://httr2.r-lib.org/articles/wrapping-apis.html#sending-data","code":""},{"path":"/reference/gist_error_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to parse error message data\nand display appropriately to user\nTaken from httr2 docs: https://httr2.r-lib.org/articles/wrapping-apis.html#sending-data — gist_error_body","text":"","code":"gist_error_body(resp)"},{"path":"/reference/make_char.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic function to make length 1 lists into characters — make_char","title":"Basic function to make length 1 lists into characters — make_char","text":"Basic function make length 1 lists characters","code":""},{"path":"/reference/make_char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic function to make length 1 lists into characters — make_char","text":"","code":"make_char(col)"},{"path":"/reference/make_datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to convert datetime responses — make_datetime","title":"Helper function to convert datetime responses — make_datetime","text":"Helper function convert datetime responses","code":""},{"path":"/reference/make_datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to convert datetime responses — make_datetime","text":"","code":"make_datetime(x)"},{"path":"/reference/paginate.html","id":null,"dir":"Reference","previous_headings":"","what":"Pagination function for GFW API calls — paginate","title":"Pagination function for GFW API calls — paginate","text":"Pagination function GFW API calls","code":""},{"path":"/reference/paginate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pagination function for GFW API calls — paginate","text":"","code":"paginate(endpoint, key)"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"New features:","title":"gfwr 1.1.0","text":"addition JSON region, can now pass EEZ MPA id get_raster function query specific region get_region_id now takes id returns label. allows get label id values returned certain endpoints (e.g. get_event) Considerable speed increases get_event function","code":""},{"path":"/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes:","title":"gfwr 1.1.0","text":"get_event prints \"request returned zero results\" returns NULL API response contains results instead causing error.","code":""},{"path":[]},{"path":"/news/index.html","id":"updated-documentation-1-1-0","dir":"Changelog","previous_headings":"Other news:","what":"Updated documentation","title":"gfwr 1.1.0","text":"get_raster: requires group_by appropriate parameter name gearType Added NEWS.md file track changes package.","code":""},{"path":"/news/index.html","id":"gfwr-100","dir":"Changelog","previous_headings":"","what":"gfwr 1.0.0","title":"gfwr 1.0.0","text":"Initial release gfwr package. includes functions access three GFW APIs - Vessels API, Events API, Map Visualization (4Wings) API.","code":""}]
