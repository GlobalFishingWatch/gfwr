% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_event.R
\name{get_event_POST}
\alias{get_event_POST}
\title{Base function to get events using a POST API endpoint and convert response to data frame}
\usage{
get_event_POST(
  event_type,
  encounter_types = NULL,
  vessels = NULL,
  flags = NULL,
  vessel_types = NULL,
  start_date = NULL,
  end_date = NULL,
  region = NULL,
  region_source = NULL,
  duration = 1,
  confidences = c(2, 3, 4),
  limit = 99999,
  offset = 0,
  sort = "+start",
  key = gfw_auth(),
  quiet = FALSE,
  print_request = FALSE,
  ...
)
}
\arguments{
\item{event_type}{Type of event to get data of. A vector with any combination
of "ENCOUNTER", "FISHING", "GAP", "LOITERING", "PORT_VISIT"}

\item{encounter_types}{Filters for types of vessels during the encounter. A
vector with any combination of: "CARRIER-FISHING", "FISHING-CARRIER",
"FISHING-SUPPORT", "SUPPORT-FISHING"}

\item{vessels}{A vector of VesselIDs, obtained via the \code{get_vessel_info()} function}

\item{vessel_types}{A vector of vessel types, any combination of: "FISHING",
"CARRIER", "SUPPORT", "PASSENGER", "OTHER_NON_FISHING", "SEISMIC_VESSEL",
"BUNKER_OR_TANKER", "CARGO"}

\item{start_date}{Start of date range to search events, in YYYY-MM-DD format and including this date}

\item{end_date}{End of date range to search events, in YYYY-MM-DD format and excluding this date}

\item{region}{geojson shape to filter raster or GFW region code (such as an
EEZ code). See details about formatting the geojson}

\item{region_source}{source of the region ('EEZ','MPA', 'RFMO' or 'USER_JSON')}

\item{duration}{duration, in minutes, of the event, ex. 30}

\item{confidences}{Confidence levels (1-4) of events (port visits only)}

\item{limit}{Limit}

\item{offset}{Offset}

\item{key}{Authorization token. Can be obtained with gfw_auth() function}

\item{quiet}{Boolean. Whether to print the number of events returned by the
request}

\item{print_request}{Boolean. Whether to print the request, for debugging
purposes. When contacting the GFW team it will be useful to send this string}

\item{...}{Other arguments}
}
\description{
Base function to get events using a POST API endpoint and convert response to data frame
}
\details{
There are currently four available event types and these events are provided
for three vessel types - fishing, carrier, and support vessels.
Fishing events (\code{event_type = "FISHING"}) are specific to fishing vessels and
loitering events (\code{event_type = "LOITERING"}) are specific to carrier vessels.
Port visits (\code{event_type = "PORT_VISIT"}) and encounters
(\code{event_type = "ENCOUNTER"}) are available for all vessel types. For more
details about the various event types, see the
\href{https://globalfishingwatch.org/our-apis/documentation#data-caveat}{GFW API documentation}.

Encounter events involve multiple vessels and one row is returned for each
vessel involved in an encounter.
For example, an encounter between a carrier and fishing vessel
(\code{CARRIER-FISHING}) will have one row for the fishing vessel and one for the
carrier vessel. The \code{id} field for encounter events has two components
separated by a \code{.}. The first component is the unique id for the encounter
event and will be the same for all vessels involved in the encounter. The
second component is an integer used to distinguish between different vessels
in the encounter.
}
\examples{
library(gfwr)
# fishing events in user geojson
region <- '"geometry": {"type": "Polygon","coordinates": [[[120.36621093749999,26.725986812271756],[122.36572265625,26.725986812271756],[122.36572265625,28.323724553546015],[120.36621093749999,28.323724553546015],[120.36621093749999,26.725986812271756]]]}'
get_event_POST(event_type = 'FISHING',
              start_date = "2017-01-01",
              end_date = "2017-01-31",
              region = region,
              region_source = 'USER_JSON',
              flags = 'CHN',
              print_request = TRUE)
# fishing events in Senegal EEZ
get_event_POST(event_type = 'FISHING',
              start_date = "2020-10-01",
              end_date = "2020-12-31",
              region = 8371,
              region_source = 'EEZ',
              flags = 'CHN',
              print_request = TRUE)
}
